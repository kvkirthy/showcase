{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/alert-helper.service.ts","webpack:///src/app/components/sc-toolbar/sc-toolbar.component.ts","webpack:///src/app/components/sc-toolbar/sc-toolbar.component.html","webpack:///src/app/error/error.component.ts","webpack:///src/app/error/error.component.html","webpack:///src/app/newspaper/banner-story/banner-story.component.ts","webpack:///src/app/newspaper/banner-story/banner-story.component.html","webpack:///src/app/newspaper/compose/compose.component.ts","webpack:///src/app/newspaper/compose/compose.component.html","webpack:///src/app/newspaper/create-newspaper-edition/create-newspaper-edition.component.ts","webpack:///src/app/newspaper/create-newspaper-edition/create-newspaper-edition.component.html","webpack:///src/app/newspaper/create-post/create-post.component.ts","webpack:///src/app/newspaper/create-post/create-post.component.html","webpack:///src/app/newspaper/home/home.component.ts","webpack:///src/app/newspaper/home/home.component.html","webpack:///src/app/newspaper/image-picker/image-picker.component.ts","webpack:///src/app/newspaper/image-picker/image-picker.component.html","webpack:///src/app/newspaper/login/login.component.ts","webpack:///src/app/newspaper/login/login.component.html","webpack:///src/app/newspaper/main/main.component.ts","webpack:///src/app/newspaper/main/main.component.html","webpack:///src/app/newspaper/models/editions.ts","webpack:///src/app/newspaper/models/newspaper-post.ts","webpack:///src/app/newspaper/newspaper-edition-list/newspaper-edition-list.component.ts","webpack:///src/app/newspaper/newspaper-edition-list/newspaper-edition-list.component.html","webpack:///src/app/newspaper/newspaper-routing.module.ts","webpack:///src/app/newspaper/newspaper.module.ts","webpack:///src/app/newspaper/ngrx/edition.actions.ts","webpack:///src/app/newspaper/ngrx/edition.effects.ts","webpack:///src/app/newspaper/ngrx/edition.reducer.ts","webpack:///src/app/newspaper/ngrx/edition.selectors.ts","webpack:///src/app/newspaper/ngrx/story.actions.ts","webpack:///src/app/newspaper/ngrx/story.effects.ts","webpack:///src/app/newspaper/ngrx/story.reducer.ts","webpack:///src/app/newspaper/ngrx/story.selectors.ts","webpack:///src/app/newspaper/nine-per-page-layout/nine-per-page-layout.component.ts","webpack:///src/app/newspaper/nine-per-page-layout/nine-per-page-layout.component.html","webpack:///src/app/newspaper/post-details/post-details.component.ts","webpack:///src/app/newspaper/post-details/post-details.component.html","webpack:///src/app/newspaper/register/register.component.ts","webpack:///src/app/newspaper/register/register.component.html","webpack:///src/app/newspaper/services/edition.service.ts","webpack:///src/app/newspaper/services/post.service.ts","webpack:///src/app/newspaper/single-column-layout/single-column-layout.component.ts","webpack:///src/app/newspaper/single-column-layout/single-column-layout.component.html","webpack:///src/app/newspaper/story-card/story-card.component.ts","webpack:///src/app/newspaper/story-card/story-card.component.html","webpack:///src/app/newspaper/story-list/story-list.component.ts","webpack:///src/app/newspaper/story-list/story-list.component.html","webpack:///src/app/newspaper/update-posts/update-posts.component.ts","webpack:///src/app/newspaper/update-posts/update-posts.component.html","webpack:///src/app/showcase/home/home.component.ts","webpack:///src/app/showcase/home/home.component.html","webpack:///src/app/showcase/pages/about/about.component.ts","webpack:///src/app/showcase/pages/about/about.component.html","webpack:///src/app/showcase/pages/applications/applications.component.ts","webpack:///src/app/showcase/pages/applications/applications.component.html","webpack:///src/app/showcase/pages/blogs/blogs.component.ts","webpack:///src/app/showcase/pages/blogs/blogs.component.html","webpack:///src/app/showcase/pages/blogs/blogs.service.ts","webpack:///src/app/showcase/pages/books/books.component.ts","webpack:///src/app/showcase/pages/books/books.component.html","webpack:///src/app/showcase/pages/create-blog/create-blog.component.ts","webpack:///src/app/showcase/pages/create-blog/create-blog.component.html","webpack:///src/app/showcase/pages/opinion/opinion.component.ts","webpack:///src/app/showcase/showcase-routing.module.ts","webpack:///src/app/showcase/showcase.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","redirectTo","pathMatch","component","AppRoutingModule","forRoot","useHash","imports","AppComponent","selector","templateUrl","styleUrls","AppModule","register","enabled","production","instrument","maxAge","logOnly","declarations","providers","bootstrap","AlertHelperService","snackbar","message","open","onAction","subscribe","dismiss","providedIn","ScToolbarComponent","ErrorComponent","BannerStoryComponent","showCardRaised","primaryActionTitle","shouldUseImage","OnImageClick","customActionEvent","primaryAction","bannerImage","story","imageId","emit","onPrimaryAction","ComposeComponent","dialog","store","availableStories","assignedStories","selectedHighlightStory","Array","selectedNewsBits","selectedNewsFeed","selectedBannerStory","CategoryBanner","Banner","CategoryHighlights","Highlight","CategoryNewsBits","NewsBit","CategoryFeed","Feed","select","data","editions","currentEdition","queryStoreByEdition","_id","stepper","next","dispatch","editionId","category","post","push","title","description","linkToPost","user","saveSelected","selectedStoryId","selectedTitle","selectedBannerImage","selectedDescription","selectedPostLink","posts","filter","i","edition","newCategory","None","storyIds","dialogRef","height","width","afterClosed","find","newStory","Object","assign","clearPreview","onSelectTopBanner","handleRemovedPost","showPreview","onSelectTopHighlight","onSelectNewsBits","onSelectNewsFeed","submitEdition","CreateNewspaperEditionComponent","formBuilder","editionService","alertHelper","createNpeFormGroup","group","required","$event","selectedEdition","editionsList","value","valid","create","dateCreated","Date","isPublished","showAlertWithClose","get","showSelectedEdition","submit","cancel","CreatePostComponent","postService","createPostFormGroup","pattern","linkToPostValue","author","result","reset","error","JSON","stringify","controls","forEach","key","setErrors","fullname","twitterHandle","userImageId","HomeComponent","selectedEditionTitle","sitePrimaryMessage","siteSecondaryMessage","selectedEditionDateCreated","ImagePickerComponent","getBanners","images","img","close","LoginComponent","MainComponent","NewspaperEdition","NewspaperEditions","User","StoryCategory","NewspaperPost","StoryCategoryMap","NewspaperPosts","NewspaperEditionListComponent","length","children","NewspaperRoutingModule","forChild","NewspaperModule","forFeature","stories","entryComponents","getAllNewspaperEditions","getAllEditionsSuccess","setEdition","EditionEffects","actions$","editionSvc","getStories$","pipe","getAll","list","initialState","allEditions","getAllEditions","state","props","sortedEditions","sort","current","prev","getTime","reverse","_storyReducer","getEditionReducer","action","getNewspaperEditions","newspaperEditions","getPublishedNewspaperEditions","npeditions","allNewspaperEditions","publishedNewspaperEditions","getAllStories","getAllStoriesSuccess","categorizeStories","updateStory","updateStoriesForEdition","updateStoriesForEditionSuccess","updateStoryJson","updateStoryJsonSuccess","StoryEffects","getActiveStories","updateStoriesForEdition$","updateStoryJson$","updatePost","allStories","getStateOnStoriesApiSuccess","concat","newState","map","updatedStory","p","storyCategory","newAllStories","selectedStory","index","indexOf","splice","getStoryReducer","newspaperStories","getStoryById","getAssignedStories","undefined","getUnassignedStories","getUnassignedToCurrentEdition","getStoryByCateory","NewspaperMainComponent","document","bannerStories","window","defaultView","storyGroups","groupStories","rowIndex","set","storyIndex","getElementById","scrollIntoView","block","inline","behavior","uniqueStories","getUniqueStories","remainingStories","sg","s","x","as","str","substring","bannerTextLength","countOfNextLineChars","split","Document","PostDetailsComponent","matBottomSheet","RegisterComponent","EditionService","httpClient","PostService","SingleColumnLayoutComponent","showHideHelpTextCss","newsbitStories","highlightStories","destory$","ne","currentEditon","resetStories","bnSt","nph","nnb","complete","StoryCardComponent","showHeaderAction","headerAction","OnStorySelected","OnMoreSelect","StoryListComponent","listTitle","remove","selectedPost","removedPost","item","UpdatePostsComponent","target","parse","savePost","updateJsonText","pages","label","AboutComponent","color1","color2","color3","color4","color5","introParagraph","ApplicationsComponent","BlogsComponent","blogService","allBlogs","getBlogs","a","b","dateAdded","localeCompare","highlightedBlog","isHighlighted","blogList$","linkToBlog","dateValue","d","toDateString","BlogsService","blog","BooksComponent","CreateBlogComponent","blogSvc","avatars","banners","avatar","getAllAvatars","re","getAllBanners","imageUrl","toISOString","OpinionComponent","twttr","widgets","load","ShowcaseRoutingModule","ShowcaseModule","environment","bootstrapModule","err","console"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ErrorComponent } from './error/error.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: '/showcase/blog',\n    pathMatch: 'full'\n  },\n  {\n    path: '**',\n    component: ErrorComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, {useHash: true})],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n}","<router-outlet></router-outlet>","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ErrorComponent } from './error/error.component';\nimport { environment } from '../environments/environment';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { ShowcaseModule } from './showcase/showcase.module';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { NewspaperModule } from './newspaper/newspaper.module';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ErrorComponent,\n  ],\n  imports: [\n    BrowserModule,\n    ShowcaseModule,\n    NewspaperModule,\n    HttpClientModule,\n    AppRoutingModule,\n    MatSnackBarModule,\n    StoreModule.forRoot({}),\n    EffectsModule.forRoot([]),\n    BrowserAnimationsModule,\n    ServiceWorkerModule.register('ngsw-worker.js', { enabled: environment.production }),\n    // Instrumentation must be imported after importing StoreModule (config is optional)\n    StoreDevtoolsModule.instrument({\n      maxAge: 25, // Retains last 25 states\n      logOnly: environment.production, // Restrict extension to log-only mode\n    }),\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AlertHelperService {\n\n  constructor(private snackbar: MatSnackBar) { }\n\n  showAlertWithClose(message: string){\n    this.snackbar.open(message, \"close\")\n        .onAction()\n        .subscribe(() => this.snackbar.dismiss() );\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'sc-toolbar',\n  templateUrl: './sc-toolbar.component.html',\n  styleUrls: ['./sc-toolbar.component.css']\n})\nexport class ScToolbarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<mat-toolbar color=\"primary\">\n    <mat-toolbar-row>\n        <img src=\"assets/profile-pic.jpg\" class=\"avatar\" alt=\"profile picture\">\n        <div class=\"title-text\">\n            <span class=\"title-text\">\n                VENKATA KEERTI KOTARU \n            </span>\n            <span class=\"small-font\">\n                ( k e e r t i )\n            </span>\n\n        </div>\n    </mat-toolbar-row>\n</mat-toolbar>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-error',\n  templateUrl: './error.component.html',\n  styleUrls: ['./error.component.css']\n})\nexport class ErrorComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<div>\n    <h2>This is Knowhere</h2>\n    Click <a href=\"#\"> here </a> to get to nearest Gas Station / Petrol Bunk!\n\n</div>\n","import { NewspaperPost } from '../models/newspaper-post';\nimport { Component, Input, Output, OnChanges, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-banner-story-card',\n  templateUrl: './banner-story.component.html',\n  styleUrls: ['./banner-story.component.css']\n})\nexport class BannerStoryComponent implements OnChanges {\n\n  bannerImage: string;\n\n  @Input() storyContent: string;\n  @Input() story: NewspaperPost;\n  @Input() showCardRaised:boolean = false;\n  @Input() customActionTitle: string;\n  @Input() primaryActionTitle: string = \"more...\"\n  @Input(\"ShouldUseImage\") shouldUseImage: boolean = true;\n  \n  @Output() OnImageClick = new EventEmitter();\n  @Output() customActionEvent = new EventEmitter();\n  @Output() primaryAction = new EventEmitter<NewspaperPost>();\n\n  ngInit(){\n    this.bannerImage = this.story.imageId;\n  }\n\n  ngOnChanges(){\n    this.bannerImage = this.bannerImage || 'assets/js.jpeg';\n  }\n\n  imageClicked(){\n    this.OnImageClick.emit();\n  }\n\n  customAction(){\n    this.customActionEvent.emit();\n  }\n\n  onPrimaryAction(){\n    this.primaryAction.emit(this.story);\n  }\n\n}\n","<mat-card [ngClass]=\"showCardRaised ?'mat-elevation-z2':'mat-elevation-z0'\">\n    <div class=\"storyImage\" *ngIf=\"shouldUseImage === true\">\n        <a (click)=\"imageClicked()\"><img [src]=\"bannerImage\" /></a>\n    </div>\n    <mat-card-header>\n        <mat-card-title>{{story.title}}</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n        <div>\n            {{story.description}}\n        </div>\n        <div *ngIf=\"story.story\">\n            {{storyContent}}\n        </div>\n    </mat-card-content>\n    <mat-card-actions>\n        <button mat-button (click)=\"onPrimaryAction()\">{{primaryActionTitle}}</button>\n        <button mat-button (click)=\"customAction()\" *ngIf=\"customActionTitle\">{{customActionTitle}}</button>\n    </mat-card-actions>\n</mat-card>","import { Store } from '@ngrx/store';\nimport { MatDialog } from '@angular/material/dialog';\nimport { NewspaperEdition } from '../models/editions';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatHorizontalStepper } from '@angular/material/stepper';\nimport { getAllNewspaperEditions } from 'src/app/newspaper/ngrx/edition.actions';\nimport { NewspaperPost, StoryCategory } from 'src/app/newspaper/models/newspaper-post';\nimport { allNewspaperEditions, selectedEdition } from 'src/app/newspaper/ngrx/edition.selectors';\nimport { ImagePickerComponent } from 'src/app/newspaper/image-picker/image-picker.component';\nimport { categorizeStories, getAllStories, updateStoriesForEdition, updateStory, updateStoryJson } from '../ngrx/story.actions';\nimport { getStoryByCateory, getAssignedStories, getUnassignedStories, getUnassignedToCurrentEdition } from 'src/app/newspaper/ngrx/story.selectors';\n\n@Component({\n  selector: 'app-compose',\n  templateUrl: './compose.component.html',\n  styleUrls: ['./compose.component.css']\n})\nexport class ComposeComponent implements OnInit {\n\n  availableStories: NewspaperPost[] =[];\n  assignedStories: NewspaperPost[] =[];\n  selectedHighlightStory = new Array<NewspaperPost>();\n  selectedNewsBits = new Array<NewspaperPost>();\n  selectedNewsFeed = new Array<NewspaperPost>();\n  selectedBannerStory = new Array<NewspaperPost>();\n  selectedTitle : string;\n  selectedDescription : string;\n  selectedBannerImage : string;\n  selectedPostLink : string;\n  selectedStoryId : string;\n  editions: NewspaperEdition[];\n  currentEdition: NewspaperEdition;\n\n  CategoryBanner = StoryCategory.Banner;\n  CategoryHighlights = StoryCategory.Highlight;\n  CategoryNewsBits = StoryCategory.NewsBit;\n  CategoryFeed = StoryCategory.Feed;\n\n  @ViewChild(\"stepper\") stepper: MatHorizontalStepper;\n\n  constructor(private dialog: MatDialog, \n    private store: Store){ }\n\n  ngOnInit(): void {\n\n      this.store\n      .select(allNewspaperEditions)\n      .subscribe( (data) => {\n        this.editions = data;\n      });\n\n      this.store\n        .select(selectedEdition)\n        .subscribe( (data: NewspaperEdition) => {\n          if(data){\n            this.currentEdition = data;\n            this.queryStoreByEdition(this.currentEdition._id);\n            this.stepper.next();\n          }\n        });\n\n      this.store.dispatch(getAllNewspaperEditions());\n      this.store.dispatch(getAllStories());\n\n  }\n\n  private queryStoreByEdition(editionId: string){\n    this.store\n    .select(getAssignedStories, {editionId: editionId})\n    .subscribe((data) => {\n      this.assignedStories = data;\n    });\n    \n    this.store\n    .select(getStoryByCateory, {category: StoryCategory.Banner, editionId: editionId})\n    .subscribe( (data) => {\n      if(data){\n        if(data){\n          this.selectedBannerStory = data;\n        }\n      }\n    });\n\n    this.store\n    .select(getStoryByCateory, {category: StoryCategory.Highlight, editionId: editionId})\n    .subscribe( (data) => {\n      if(data){\n        this.selectedHighlightStory = data;\n      }\n    });\n\n    this.store\n    .select(getStoryByCateory,{category: StoryCategory.Feed, editionId: editionId})\n    .subscribe( (data) => {\n      if(data){\n        this.selectedNewsFeed = data;\n      }\n    });\n\n    this.store\n    .select(getStoryByCateory,{category: StoryCategory.NewsBit, editionId: editionId})\n    .subscribe( (data) => {\n      if(data){\n        this.selectedNewsBits = data;\n      }\n    });\n\n    this.store\n    // .select(getUnassignedToCurrentEdition, {editionId} )\n    .select(getUnassignedStories, {editionId} )\n    .subscribe((data) => {\n      this.availableStories = data;\n    });\n\n\n  }\n\n  onSelectTopBanner(post: NewspaperPost){\n    this.selectedBannerStory.push({\n      _id: post._id,\n      title : post.title,\n      imageId : post.imageId,\n      description : post.description,\n      story: post.story,\n      linkToPost : post.linkToPost,\n      user: post.user,\n    });\n    this.saveSelected(this.CategoryBanner, post._id)\n    // this.showPreview(post);\n  }\n\n  showPreview(post: NewspaperPost){\n    this.selectedStoryId = post._id;\n    this.selectedTitle = post.title;\n    this.selectedBannerImage = post.imageId;\n    this.selectedDescription = post.description;\n    this.selectedPostLink = post.linkToPost;\n  }\n\n  clearPreview(){\n      this.selectedTitle = '';\n      this.selectedBannerImage = '';\n      this.selectedDescription = '';\n      this.selectedPostLink = '';\n  }\n\n\n  onSelectTopHighlight(post: NewspaperPost){\n    this.selectedHighlightStory.push({\n      _id: post._id,\n      title : post.title,\n      imageId : post.imageId,\n      description : post.description,\n      story: post.story,\n      linkToPost : post.linkToPost,\n      user: post.user,\n    });\n    this.saveSelected(this.CategoryHighlights, post._id)\n  }\n\n  submitEdition(){\n    this.store.dispatch(updateStoriesForEdition({\n     posts: this.assignedStories.filter(i => i.edition._id === this.currentEdition._id)\n    }));\n  }\n\n  onSelectNewsBits(post: NewspaperPost){\n    this.selectedNewsBits.push({\n      _id: post._id,\n      title : post.title,\n      imageId : post.imageId,\n      description : post.description,\n      story: post.story,\n      linkToPost : post.linkToPost,\n      user: post.user,\n    });\n    this.saveSelected(this.CategoryNewsBits, post._id)\n  }\n\n  onSelectNewsFeed(post: NewspaperPost){\n    this.selectedNewsFeed.push({\n      _id: post._id,\n      title : post.title,\n      imageId : post.imageId,\n      description : post.description,\n      story: post.story,\n      linkToPost : post.linkToPost,\n      user: post.user,\n    });\n    this.saveSelected(this.CategoryFeed, post._id)\n  }\n\n  handleRemovedPost(post: NewspaperPost){\n    this.store.dispatch(categorizeStories({\n      newCategory: StoryCategory.None,\n      storyIds: [post._id]\n    }));\n  }\n\n  imageClicked(){\n    let dialogRef = this.dialog.open(ImagePickerComponent, {\n      height: '100%',\n      width: '100%'\n    });\n    dialogRef\n      .afterClosed()\n      .subscribe( data => {\n        this.selectedBannerImage=data;\n        let story = this.selectedBannerStory.find( story => story._id === this.selectedStoryId);\n        let newStory: NewspaperPost;\n        if(story){\n          newStory = Object.assign({}, story);\n          newStory.imageId = this.selectedBannerImage;\n          this.store.dispatch(updateStory(newStory));\n        }\n\n      });\n  }\n\n  saveSelected(category: StoryCategory, selectedStoryId:string = this.selectedStoryId){\n    // console.log(\"button selected\", this.selectedStoryId);\n    this.store.dispatch(categorizeStories({\n      newCategory: category,\n      storyIds: [selectedStoryId],\n      edition: this.currentEdition\n    }));\n\n  }\n\n}\n","<mat-horizontal-stepper (selectionChange)=\"clearPreview()\" #stepper>\n        <mat-step >\n            <ng-template matStepLabel>Select / Create Newspaper Edition</ng-template>\n            <div class=\"row\">\n                <app-create-newspaper-edition class=\"col-8\" [editions]=\"editions\">\n                </app-create-newspaper-edition>\n            </div>\n        </mat-step>\n        <mat-step>\n            <ng-template matStepLabel>Choose top banner story</ng-template>\n            <div class=\"row\">\n                <app-story-list [Stories]=\"availableStories\" Title=\"Available Stories\" class=\"col-3\"\n                    (SelectedPost)=\"onSelectTopBanner($event)\">\n                </app-story-list>\n        \n                <app-story-list [Stories]=\"selectedBannerStory\" IsRemoveEnabled=\"true\" Title=\"Selected Stories\" class=\"col-3\"\n                    (RemovedPost)=\"handleRemovedPost($event)\" (SelectedPost)=\"showPreview($event)\"></app-story-list>\n        \n                <div class=\"col-6\">\n                    <div *ngIf=\"selectedTitle\">\n                        <app-banner-story-card \n                            [story] = \"{\n                                description: selectedDescription,\n                                imageId: selectedBannerImage,\n                                postLink: selectedPostLink\n                            }\" \n                            (OnImageClick)=\"imageClicked()\"></app-banner-story-card>\n        \n                    </div>\n                </div>\n            </div>\n        </mat-step>\n        <mat-step>\n            <ng-template matStepLabel>Pick highlights</ng-template>\n            <div class=\"row\">\n                <app-story-list [Stories]=\"availableStories\" \n                    class=\"col-3\" \n                    Title=\"Available Stories\"  \n                    (SelectedPost)=\"onSelectTopHighlight($event)\">\n                </app-story-list>\n                \n                <app-story-list \n                        [Stories]=\"selectedHighlightStory\" \n                        IsRemoveEnabled=\"true\"\n                        Title=\"Selected Stories\"  \n                        class=\"col-3\" \n                        (RemovedPost)=\"handleRemovedPost($event)\"\n                        (SelectedPost)=\"showPreview($event)\"></app-story-list>\n\n                <div class=\"col-6\" *ngIf=\"selectedTitle\">\n                    <app-story-card [title]=\"selectedTitle\" \n                        [description]=\"selectedDescription\"\n                        (OnImageClick)=\"imageClicked()\"></app-story-card>\n                </div>\n            </div>\n        </mat-step>\n        <mat-step>\n            <ng-template matStepLabel>Pick top news bits</ng-template>\n            <div class=\"row\">\n                <app-story-list [Stories]=\"availableStories\" \n                    class=\"col-3\" \n                    Title=\"Available Stories\"  \n                    (RemovedPost)=\"handleRemovedPost($event)\"\n                    (SelectedPost)=\"onSelectNewsBits($event)\">\n                </app-story-list>\n\n                <app-story-list \n                        [Stories]=\"selectedNewsBits\" \n                        IsRemoveEnabled=\"true\"\n                        Title=\"Selected Stories\"  \n                        class=\"col-3\" \n                        (RemovedPost)=\"handleRemovedPost($event)\"\n                        (SelectedPost)=\"showPreview($event)\"></app-story-list>\n\n                <div class=\"col-6\" *ngIf=\"selectedTitle\">\n                    <app-story-card [title]=\"selectedTitle\" \n                        [description]=\"selectedDescription\"\n                        ShouldUseImage=false\n                        (OnImageClick)=\"imageClicked()\"></app-story-card>\n                </div>\n            </div>\n        </mat-step>\n        <mat-step>\n            <ng-template matStepLabel>Choose news feed</ng-template>\n            <div class=\"row\">\n                <app-story-list [Stories]=\"availableStories\" \n                    class=\"col-3\" \n                    Title=\"Available Stories\"  \n                    (SelectedPost)=\"onSelectNewsFeed($event)\">\n                </app-story-list>\n\n                <app-story-list \n                        [Stories]=\"selectedNewsFeed\" \n                        IsRemoveEnabled=\"true\"\n                        Title=\"Selected Stories\"  \n                        class=\"col-3\" \n                        (RemovedPost)=\"handleRemovedPost($event)\"\n                        (SelectedPost)=\"showPreview($event)\"></app-story-list>\n\n                <div class=\"col-6\" *ngIf=\"selectedTitle\">\n                    <app-story-card [title]=\"selectedTitle\" \n                        [description]=\"selectedDescription\"\n                        ShouldUseImage=false\n                        (OnImageClick)=\"imageClicked()\"></app-story-card>\n                </div>\n            </div>\n        </mat-step>\n        <mat-step>\n            <ng-template matStepLabel>Review and confirm</ng-template>\n            <app-nine-per-page-layout></app-nine-per-page-layout>  \n            <div>\n                Review and confirm\n                <button (click)=\"submitEdition()\" mat-button >Go</button>\n            </div>\n        </mat-step>\n    <!-- </form> -->\n</mat-horizontal-stepper>","import { Store } from '@ngrx/store';\nimport * as actions from '../ngrx/edition.actions';\nimport { NewspaperEdition } from '../models/editions';\nimport { Component, Input, OnInit } from '@angular/core';\nimport { EditionService } from '../services/edition.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AlertHelperService } from 'src/app/components/alert-helper.service';\n\n@Component({\n  selector: 'app-create-newspaper-edition',\n  templateUrl: './create-newspaper-edition.component.html',\n  styleUrls: ['./create-newspaper-edition.component.css']\n})\nexport class CreateNewspaperEditionComponent implements OnInit {\n\n  createNpeFormGroup: FormGroup;\n  selectedEdition: NewspaperEdition;\n  @Input('editions') editionsList: NewspaperEdition[];\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private editionService: EditionService,\n    private alertHelper: AlertHelperService,\n    private store: Store\n  ) { }\n\n  ngOnInit(): void {\n    this.createNpeFormGroup = this.formBuilder.group({\n      title: ['', Validators.required],\n      description: ['', Validators.required]\n    });\n  }\n\n  get title(){\n    return this.createNpeFormGroup.get('title');\n  }\n  \n  get description(){\n    return this.createNpeFormGroup.get('description');\n  }\n\n  get dateCreated(){\n    return this.createNpeFormGroup.get('dateCreated');\n  }\n\n  get isPublished(){\n    return this.createNpeFormGroup.get('isPublished');\n  }\n\n  showSelectedEdition($event){\n    this.selectedEdition = this.editionsList.find(i => i._id === $event.value);\n  }\n\n  continueWithEdition(selectedEdition){\n    this.store.dispatch(actions.setEdition(selectedEdition))\n  }\n\n  submit(){\n    if(this.createNpeFormGroup.valid){\n      this.editionService.create({\n        title: this.title.value,\n        description: this.description.value,\n        dateCreated: new Date(),\n        isPublished: false\n      }).subscribe(() => {\n        this.alertHelper.showAlertWithClose(\"Created a new edition\");\n      });\n    } else {\n      this.alertHelper.showAlertWithClose(\"Please provide correct values for the post\");\n    }\n\n  }\n\n  cancel(){\n\n  }\n\n}\n","<form [formGroup]=\"createNpeFormGroup\" class=\"row\">\n    <span class=\"col-sm-1 col-md-1\"></span>\n\n    <div class=\"col-sm-12 col-md-4 right-border-line\">\n        <h5>Select an existing edition</h5>\n        <mat-form-field appearance=\"fill\" >\n            <mat-label>Select Newspaper Editions</mat-label>\n            <mat-select (selectionChange)=\"showSelectedEdition($event)\" >\n                <mat-option *ngFor=\"let edition of editionsList\" [value]=\"edition._id\">\n                    {{edition.title}}\n                </mat-option>\n            </mat-select>\n        </mat-form-field>\n        <div *ngIf=\"selectedEdition\" class=\"edition-details\">\n            <strong>{{selectedEdition.title}}</strong>\n            <div>{{selectedEdition.description}}</div>\n            <div>{{selectedEdition.dateCreated | date:'dd-MMM-yyyy hh:mm'}}</div>\n            <div>{{selectedEdition.isPublished?'Published':'Draft'}}</div>\n        </div>\n        <button *ngIf=\"selectedEdition\" type=\"button\" mat-button color=\"primary\" (click)=\"continueWithEdition(selectedEdition)\">Continue</button>\n\n    </div>\n\n    <span class=\"col-sm-1 col-md-1\"></span>\n\n    <div class=\"col-xs-12 col-sm-10 col-md-6\">\n        <div class=\"row\">\n            <h5>Create a new edition</h5>\n        </div>\n        <div class=\"row\">\n            <mat-form-field class=\"col-12\" id=\"title\" name=\"title\" >\n                <mat-label> Title</mat-label>\n                <input type=\"text\" formControlName=\"title\" matInput>\n                <mat-hint>  Provide a title </mat-hint> \n            </mat-form-field>\n            <mat-form-field id=\"description\" name=\"description\"  class=\"col-12\">\n                <mat-label> Description</mat-label>\n                <textarea matInput formControlName=\"description\" rows=\"3\"></textarea>\n                <mat-hint>  Describe the news edition </mat-hint> \n            </mat-form-field>\n        </div>\n        <div class=\"row actions-row\">\n            <button type=\"submit\" mat-button (click)=\"submit()\" color=\"primary\">Submit</button>\n            <button mat-button (click)=\"cancel()\">Cancel</button>\n        </div>\n    </div>\n\n    <span class=\"col-sm-1\"></span>\n</form>","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { User } from 'src/app/newspaper/models/newspaper-post';\nimport { AlertHelperService } from 'src/app/components/alert-helper.service';\nimport { FormBuilder, FormGroup, Validators, Form, NgForm, FormGroupDirective } from '@angular/forms';\nimport { PostService } from 'src/app/newspaper/services/post.service';\n\n@Component({\n  selector: 'app-create-post',\n  templateUrl: './create-post.component.html',\n  styleUrls: ['./create-post.component.css']\n})\nexport class CreatePostComponent implements OnInit {\n\n  createPostFormGroup: FormGroup;\n  @ViewChild(FormGroupDirective) frm;\n\n  constructor(private postService: PostService,\n    private formBuilder: FormBuilder,\n    private alertHelper: AlertHelperService) { \n      this.createPostFormGroup = this.formBuilder.group({\n        title: ['', Validators.required],\n        description: ['', Validators.required],\n        story: ['', Validators.required],\n        bannerImage: [''],\n        linkToPost: ['', [Validators.required, Validators.pattern(/https?:\\/\\/(.*)/gi)] ]\n      });\n    }\n\n  ngOnInit(): void {\n  }\n\n  get title(){\n    return this.createPostFormGroup.get('title');\n  }\n  \n  get description(){\n    return this.createPostFormGroup.get('description');\n  }\n\n  get story(){\n    return this.createPostFormGroup.get('story');\n  }\n\n  get bannerImage(){\n    return this.createPostFormGroup.get('bannerImage');\n  }\n\n  get linkToPostValue(){\n    let value:string = this.createPostFormGroup.get('linkToPost').value;\n    return value;\n  }\n\n  get author(): User{\n    return {\n      fullname: 'Vencki',\n      twitterHandle: '@keertikotaru',\n      userImageId: 'ny.jpg'\n    }\n  }\n\n  submit(){\n    if(this.createPostFormGroup.valid){\n      this.postService.create({\n        title: this.title.value,\n        description: this.description.value,\n        story: this.story.value,\n        imageId: this.bannerImage?.value,\n        linkToPost: this.linkToPostValue,\n        user: this.author\n      }).subscribe((result) => {\n        if(result['_id']){\n          this.reset();\n          this.alertHelper.showAlertWithClose(\"Thank you for your contribution.\");\n        } else {\n          this.alertHelper.showAlertWithClose(\"Something wrong! Post not created\");\n        }\n      }, error =>  this.alertHelper.showAlertWithClose(`Something wrong! ${JSON.stringify(error)}`));\n    } else {\n      this.alertHelper.showAlertWithClose(\"Please provide correct values for the post\");\n    }\n  }\n\n  cancel() {\n    this.reset();\n  }\n  \n  private reset(){\n    this.createPostFormGroup.reset();\n    Object.keys(this.createPostFormGroup.controls).forEach(key => {\n      this.createPostFormGroup.controls[key].setErrors(null)\n    });\n  }\n\n}\n","<form [formGroup]=\"createPostFormGroup\" class=\"row\">\n    <span class=\"col-sm-1 col-md-3\"></span>\n    <div class=\"col-xs-12 col-sm-10 col-md-6\">\n        <div class=\"row\">\n            <!-- <div class=\"col-sm-1 col-md-3\"></div>\n            <h1 class=\"col-sm-10 col-md-6\">Contribute a Post</h1>\n            <div class=\"col-sm-1 col-md-3\"></div> -->\n            <h1>Contribute a Post</h1>\n        </div>\n        <div class=\"row\">\n            <!-- <input type=\"text\" matInput id=\"title\" name=\"title\" formControl=\"title\"  matInput> -->\n\n            <mat-form-field class=\"col-12\" id=\"title\" name=\"title\" >\n                <mat-label> Title</mat-label>\n                <input type=\"text\" formControlName=\"title\" matInput>\n                <mat-hint>  Provide a title </mat-hint> \n            </mat-form-field>\n            <mat-form-field id=\"description\" name=\"description\"  class=\"col-12\">\n                <mat-label> Short description</mat-label>\n                <textarea matInput formControlName=\"description\" rows=\"4\"></textarea>\n                <mat-hint>  Provide a short description </mat-hint> \n            </mat-form-field>\n            <mat-form-field id=\"description\" name=\"description\"  class=\"col-12\">\n                <mat-label>Detailed Story</mat-label>\n                <textarea matInput formControlName=\"story\" rows=\"10\"></textarea>\n                <mat-hint> Tell us your story! </mat-hint> \n            </mat-form-field>\n            <mat-form-field id=\"url\" name=\"url\"  class=\"col-12\">\n                <mat-label>Link</mat-label>\n                <input type=\"url\" formControlName=\"linkToPost\" matInput>\n                <mat-hint>Link to the post </mat-hint> \n            </mat-form-field>\n        </div>\n        <div class=\"row actions-row\">\n            <button type=\"submit\" mat-button (click)=\"submit()\" color=\"primary\">Submit</button>\n            <button mat-button (click)=\"cancel()\">Cancel</button>\n        </div>\n    </div>\n    <span class=\"col-sm-1 col-md-3\"></span>\n</form>","import { Store } from '@ngrx/store';\nimport * as actions from '../ngrx/edition.actions';\nimport { Component, OnInit } from '@angular/core';\nimport { NewspaperEdition } from '../models/editions';\n\nimport { getAllNewspaperEditions } from '../ngrx/edition.actions';\nimport { publishedNewspaperEditions, selectedEdition } from 'src/app/newspaper/ngrx/edition.selectors';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  editions: NewspaperEdition[];\n  selectedEditionTitle: string = '';\n  selectedEditionDateCreated: Date;\n  sitePrimaryMessage = \"Be up to date with JavaScript news and updates!\";\n  siteSecondaryMessage = \"In the fast moving technology space, it's important to know the trends. At the same time, it's not easy. It consumes energy and time. JavaScript Times makes life easy by providing regular updates in a quick summary.\";\n\n  constructor(private store: Store) { }\n\n  ngOnInit(): void {\n    \n    this.store.dispatch(getAllNewspaperEditions());\n\n    this.store\n    .select(publishedNewspaperEditions)\n    .subscribe( (data) => {\n      this.editions = data;\n      if(data && data[0]){\n        this.selectedEditionTitle = data[0].title;\n        this.selectedEditionDateCreated = data[0].dateCreated;\n        // this.store.dispatch(actions.setEdition(data[0]));\n      }\n    });\n\n    this.store\n    .select(selectedEdition)\n    .subscribe( (selectedEdition: NewspaperEdition) => {\n      if(selectedEdition){\n        this.selectedEditionTitle = selectedEdition.title;\n        this.selectedEditionDateCreated = selectedEdition.dateCreated;\n        // this.store.dispatch(actions.setEdition(selectedEdition));\n      }\n    });\n  }\n\n}\n","<p class=\"d-none d-md-block md-and-above\">\n    <mat-toolbar class=\"fixed-header \">\n        <mat-toolbar-row class=\"row\">\n            <span class=\"col-3\"></span>\n            <div class=\"col-2 center-align\">\n                <img src=\"assets/jstimes2.png\" alt=\"\">\n            </div>\n            <span class=\"col-7\">\n                <app-newspaper-edition-list class=\"col-8\" [editions]=\"editions\"></app-newspaper-edition-list>\n                <strong *ngIf=\"selectedEditionTitle && selectedEditionDateCreated\"> | {{ selectedEditionDateCreated |\n                    date:'dd-MMM-yyyy' }}</strong>\n            </span>\n        </mat-toolbar-row>\n    </mat-toolbar>\n</p>\n<div class=\"d-none d-md-block md-and-above\">\n    <div class=\"empty-fill-toolbar-space\"></div>\n    <div class=\"row site-message\">\n        <span class=\"col-2\">&nbsp;</span>\n        <span class=\"site-message col-8\">\n            {{sitePrimaryMessage}}\n            {{siteSecondaryMessage}}\n            <hr>\n        </span>\n        <span class=\"col-2\">&nbsp;</span>\n    </div>\n</div>\n<mat-toolbar class=\"fixed-header d-xs-block d-md-none\">\n    <mat-toolbar-row class=\"fixed-header\">\n        <img src=\"assets/jstimes2.png\" alt=\"\">\n        <div>\n            <app-newspaper-edition-list class=\"col-8\" [editions]=\"editions\"></app-newspaper-edition-list>\n            <strong *ngIf=\"selectedEditionTitle && selectedEditionDateCreated\"> |\n                {{ selectedEditionDateCreated | date:'dd-MMM-yyyy' }}</strong>\n        </div>\n    </mat-toolbar-row>\n</mat-toolbar>\n<div class=\"d-xs-block d-md-none sm-and-below\">\n    <mat-card>\n        <mat-card-content>\n            {{sitePrimaryMessage}}\n            {{siteSecondaryMessage}}\n        </mat-card-content>\n    </mat-card>\n    <div class=\"hack\"></div>\n</div>\n<div class=\"root-node\">\n    <router-outlet></router-outlet>\n</div>","import { MatDialogRef } from '@angular/material/dialog';\nimport { Component, OnInit } from '@angular/core';\nimport { PostService } from 'src/app/newspaper/services/post.service';\n\n@Component({\n  selector: 'app-image-picker',\n  templateUrl: './image-picker.component.html',\n  styleUrls: ['./image-picker.component.css']\n})\nexport class ImagePickerComponent implements OnInit {\n\n  images;\n\n  constructor(private postService: PostService, \n    private dialogRef: MatDialogRef<ImagePickerComponent>) { }\n\n  ngOnInit(): void {\n    this.postService\n      .getBanners()\n      .subscribe((result) => {\n        this.images =result;\n      });\n  }\n\n  onImageClick(img){\n    this.dialogRef.close(img);\n  }\n\n  close(){\n    this.dialogRef.close();\n  }\n\n}\n","\n<div class=\"row\">\n    <h2 class=\"col-10\" mat-dialog-title>Select Image</h2>\n    <mat-icon class=\"col-2\" (click)=\"close()\">close</mat-icon>\n</div>\n<div class=\"row center-aligned\">\n    <div class=\"col-4\" *ngFor=\"let img of images\">\n        <a (click)=\"onImageClick(img)\">\n            <img [src]=\"img\">\n        </a>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<form formGroup=\"\" class=\"row\">\n    <span class=\"col-4\"></span>\n    <div class=\"col-4\">\n        <div class=\"row\">\n            <h1>Register to Login</h1>\n        </div>\n        <div class=\"row\">\n            <mat-form-field class=\"col-12\">\n                <mat-label> E-mail</mat-label>\n                <input matInput type=\"email\">\n            </mat-form-field>\n            <mat-form-field class=\"col-12\">\n                <mat-label> Password</mat-label>\n                <input matInput type=\"password\">\n            </mat-form-field>\n        </div>\n        <div class=\"row\">\n            <button mat-button color=\"primary\">Login</button>\n            <button mat-button >Cancel</button>\n        </div>\n    </div>\n    <span class=\"col-4\"></span>\n</form>","import { Store } from '@ngrx/store';\nimport { Component, OnInit } from '@angular/core';\nimport { getAllStories } from '../ngrx/story.actions';\n\n@Component({\n  selector: 'app-main',\n  templateUrl: './main.component.html',\n  styleUrls: ['./main.component.css']\n})\nexport class MainComponent implements OnInit {\n\n  constructor(private store: Store) { }\n\n  ngOnInit(): void {\n    this.store.dispatch(getAllStories());\n\n  }\n\n}\n","<app-nine-per-page-layout class=\"d-none d-md-block\"></app-nine-per-page-layout>  \n\n<app-single-column-layout class=\"d-xs-block d-md-none\"></app-single-column-layout>","\nexport class NewspaperEdition {\n    _id?: string;\n    title: string;\n    description: string;\n    isPublished: boolean;\n    dateCreated: Date;\n}\n\nexport class NewspaperEditions {\n    editions: NewspaperEdition[];\n}","import { NewspaperEdition } from './editions';\n\nexport class User {\n    fullname: string;\n    twitterHandle: string;\n    userImageId: string;\n}\n\nexport enum StoryCategory{\n    None,\n    Banner,\n    Highlight,\n    NewsBit,\n    Feed\n}\n\nexport class NewspaperPost {\n    _id?: string;\n    title: string;\n    description: string;\n    story: string;\n    imageId: string;\n    linkToPost: string;\n    user: User;\n    storyCategory?: StoryCategory;\n    edition?: NewspaperEdition;\n}\n\nexport class StoryCategoryMap {\n    storyIds: string[];\n    newCategory: StoryCategory;\n    edition?: NewspaperEdition;\n}\n\nexport class NewspaperPosts {\n    posts: NewspaperPost[]\n}","import { Store } from '@ngrx/store';\nimport * as actions from '../ngrx/edition.actions';\nimport { NewspaperEdition } from '../models/editions';\nimport { Component, Input, OnChanges, OnInit } from '@angular/core';\nimport { selectedEdition as selectedEditionSelector } from '../ngrx/edition.selectors';\n\n@Component({\n  selector: 'app-newspaper-edition-list',\n  styleUrls: ['./newspaper-edition-list.component.css'],\n  templateUrl: './newspaper-edition-list.component.html'\n})\nexport class NewspaperEditionListComponent implements OnInit, OnChanges {\n\n  selectedEdition: NewspaperEdition = new NewspaperEdition();\n  @Input('editions') editionsList: NewspaperEdition[];\n\n  constructor(private store: Store) { }\n\n  ngOnInit(): void {\n    this.store\n    .select(selectedEditionSelector)\n    .subscribe( (data: NewspaperEdition) => {\n      if(data){\n        this.selectedEdition = data;\n      }\n    });\n  }\n\n  ngOnChanges(){\n    if(this.editionsList?.length > 0 && !this.selectedEdition._id){\n      this.store.dispatch(actions.setEdition(this.editionsList[0]));\n    }\n  }\n\n  showSelectedEdition($event){\n    this.store.dispatch(actions.setEdition(this.editionsList.find(i => i._id === $event.value)));\n  }\n\n}","    <mat-select *ngIf=\"editionsList && editionsList.length\" (selectionChange)=\"showSelectedEdition($event)\" [(value)]=\"selectedEdition._id\">\n        <mat-option *ngFor=\"let edition of editionsList;\" [value]=\"edition._id\">\n            {{edition.title}}\n        </mat-option>\n    </mat-select>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { HomeComponent } from './home/home.component';\nimport { MainComponent } from './main/main.component';\nimport { LoginComponent } from './login/login.component';\nimport { ComposeComponent } from './compose/compose.component';\nimport { RegisterComponent } from './register/register.component';\nimport { CreatePostComponent } from './create-post/create-post.component';\nimport { UpdatePostsComponent } from './update-posts/update-posts.component';\n\nconst routes: Routes = [{\n  path: 'newspaper',\n  redirectTo: 'newspaper/admin/register',\n  pathMatch: 'full'\n}, {\n  path: 'newspaper',\n  component: HomeComponent,\n  children: [{\n    path: 'main',\n    component: MainComponent\n  },{\n    path: 'admin/register',\n    component: RegisterComponent\n  }, {\n    path: 'admin/login',\n    component: LoginComponent\n  },{\n    path: 'admin/post',\n    component: CreatePostComponent\n  },{\n    path: 'admin/compose',\n    component: ComposeComponent\n  },{\n    path: 'admin/update-posts',\n    component: UpdatePostsComponent\n  }]\n},];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class NewspaperRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { MainComponent } from './main/main.component';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport { FlexLayoutModule } from '@angular/flex-layout';\n\nimport { MatListModule } from '@angular/material/list'\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\n\nimport { StoryEffects } from './ngrx/story.effects';\nimport { getStoryReducer } from './ngrx/story.reducer';\nimport { EditionEffects } from './ngrx/edition.effects';\nimport { getEditionReducer } from './ngrx/edition.reducer';\n\nimport { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { ComposeComponent } from './compose/compose.component';\nimport { RegisterComponent } from './register/register.component';\nimport { NewspaperRoutingModule } from './newspaper-routing.module';\nimport { StoryCardComponent } from './story-card/story-card.component';\nimport { StoryListComponent } from './story-list/story-list.component';\nimport { CreatePostComponent } from './create-post/create-post.component';\nimport { PostDetailsComponent } from './post-details/post-details.component';\nimport { UpdatePostsComponent } from './update-posts/update-posts.component';\nimport { BannerStoryComponent } from './banner-story/banner-story.component';\nimport { ImagePickerComponent } from './image-picker/image-picker.component';\nimport { NewspaperMainComponent } from './nine-per-page-layout/nine-per-page-layout.component';\nimport { CreateNewspaperEditionComponent } from './create-newspaper-edition/create-newspaper-edition.component';\nimport { NewspaperEditionListComponent } from './newspaper-edition-list/newspaper-edition-list.component';\nimport { SingleColumnLayoutComponent } from './single-column-layout/single-column-layout.component';\n\n@NgModule({\n  declarations: [\n    HomeComponent, \n    MainComponent,\n    LoginComponent, \n    ComposeComponent, \n    RegisterComponent, \n    StoryListComponent, \n    StoryCardComponent,\n    CreatePostComponent, \n    ImagePickerComponent,\n    BannerStoryComponent,\n    PostDetailsComponent,\n    UpdatePostsComponent,\n    NewspaperMainComponent,\n    SingleColumnLayoutComponent, \n    NewspaperEditionListComponent,\n    CreateNewspaperEditionComponent,\n  ],\n  imports: [\n    CommonModule,\n    MatListModule,\n    MatCardModule,\n    MatIconModule,\n    MatInputModule,\n    MatDialogModule,\n    ScrollingModule,\n    MatSelectModule,\n    MatButtonModule,\n    MatStepperModule,\n    MatToolbarModule,\n    FlexLayoutModule,\n    MatCheckboxModule,\n    ReactiveFormsModule,\n    MatBottomSheetModule,\n    NewspaperRoutingModule,\n    EffectsModule.forFeature([StoryEffects, EditionEffects]),\n    StoreModule.forFeature( 'newspaperStories', {stories: getStoryReducer }),\n    StoreModule.forFeature( 'newspaperEditions', getEditionReducer),\n  ],\n  entryComponents:[PostDetailsComponent]\n})\nexport class NewspaperModule { }\n","import { createAction, props } from '@ngrx/store';\nimport { NewspaperEdition, NewspaperEditions } from '../models/editions';\n\nexport const getAllNewspaperEditions \n    = createAction('[Compose Component] getAllNewspaperEditions');\n\nexport const getAllEditionsSuccess \n    = createAction('[Compose Component] getAllEditionsSuccess', \n        props<NewspaperEditions>()\n    );\n\nexport const setEdition \n    = createAction('[CreateNewsPaperEdition Component] setEdition',\n        props<NewspaperEdition>()    \n    );","import { EMPTY } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport * as actions from './edition.actions';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { EditionService } from '../services/edition.service';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\n\n@Injectable()\nexport class EditionEffects {\n\n    getStories$ = createEffect(() => this.actions$.pipe(\n        ofType(actions.getAllNewspaperEditions),\n        mergeMap(() => this.editionSvc.getAll()\n            .pipe(\n                map(list => (actions.getAllEditionsSuccess({editions: list}))),\n                catchError(() => EMPTY),\n            ))\n        )\n    );\n\n    constructor(\n        private actions$: Actions,\n        private editionSvc: EditionService\n    ) {}\n}","import { Editions } from './models';\nimport * as actions from './edition.actions';\nimport { createReducer, on } from \"@ngrx/store\";\nimport { NewspaperEdition, NewspaperEditions } from '../models/editions';\n\nconst initialState: Editions = {\n    allEditions: {\n        editions: []\n    }\n}\n\nconst getAllEditions = (state: Editions, props: NewspaperEditions) => {\n    let sortedEditions = [...props.editions];\n    sortedEditions.sort((current, prev) => {\n        return new Date(current.dateCreated).getTime() - new Date(prev.dateCreated).getTime()\n    })\n    .reverse();\n\n    return {\n        ...state,\n        allEditions: {\n            editions: sortedEditions\n        }\n    };\n};\n\nconst _storyReducer = createReducer(\n    initialState,\n    on(actions.getAllEditionsSuccess, getAllEditions),\n    on(actions.setEdition, (state: Editions, props: NewspaperEdition) => ({...state, selectedEdition:props}) ),\n);\n\nexport function getEditionReducer(state: Editions, action) {\n    return _storyReducer(state,action);\n}","import { createSelector } from \"@ngrx/store\";\nimport { NewspaperEdition } from '../models/editions';\n\nexport const getNewspaperEditions = (state) => {\n    return state.newspaperEditions;\n}\n\nexport const getPublishedNewspaperEditions = (state) => {\n    return state?.newspaperEditions?.allEditions?.editions.filter( e => e.isPublished === \"true\" );\n}\n\nexport const selectedEdition = createSelector(getNewspaperEditions, (npeditions) => npeditions.selectedEdition);\nexport const allNewspaperEditions = createSelector(getNewspaperEditions, npeditions => npeditions.allEditions.editions);\nexport const publishedNewspaperEditions = createSelector(getPublishedNewspaperEditions, npeditions => npeditions);\n\n","import { createAction, props } from '@ngrx/store';\nimport { NewspaperPost, NewspaperPosts, StoryCategoryMap } from '../models/newspaper-post';\n\nexport const getAllStories = createAction('[Compose Component] getAllStories');\nexport const getAllStoriesSuccess \n    = createAction('[Compose Component] getAllStoriesSuccess', \n        props<NewspaperPosts>()\n    );\n\n// export const getStoryById = createAction('[Compose Component] getStoryById', props<String>());\n\n// export const getAvailableStories = createAction('[Compose Component getAvailableStories');\nexport const categorizeStories = createAction('[Compose Component categorizeStories', props<StoryCategoryMap>());\nexport const updateStory = createAction('[Compose Component updateStory', props<NewspaperPost>());\n\nexport const updateStoriesForEdition = createAction('[Compose Component updateStoriesForEdition', props<NewspaperPosts>());\nexport const updateStoriesForEditionSuccess = createAction('[Compose Component updateStoriesForEditionSuccess', props<Boolean>());\n\nexport const updateStoryJson = createAction('[UpdatePosts Component updateStoryJson', props<NewspaperPost>());\nexport const updateStoryJsonSuccess = createAction('[UpdatePosts Component updateStoryJsonSuccess', props<Boolean>());","import { EMPTY } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport * as actions from './story.actions';\nimport { PostService } from '../services/post.service';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\n\n@Injectable()\nexport class StoryEffects {\n\n    getStories$ = createEffect(() => this.actions$.pipe(\n        ofType(actions.getAllStories),\n        mergeMap(() => this.postService.getActiveStories()\n            .pipe(\n                map(stories => (actions.getAllStoriesSuccess({posts: stories}))),\n                catchError(() => EMPTY),\n            ))\n        )\n    );\n\n    updateStoriesForEdition$ = createEffect(() => this.actions$.pipe(\n        ofType(actions.updateStoriesForEdition),\n        mergeMap((req) => this.postService.updateStoriesForEdition(req)\n            .pipe(\n                map(() => (actions.updateStoriesForEditionSuccess(true))),\n                catchError(() => EMPTY),\n            ))\n        )\n    );\n\n    updateStoryJson$ = createEffect(() => this.actions$.pipe(\n        ofType(actions.updateStoryJson),\n        mergeMap((req) => this.postService.updatePost(req)\n            .pipe(\n                map(() => (actions.updateStoryJsonSuccess(true))),\n                catchError(() => EMPTY),\n            ))\n        )\n    );\n\n    constructor(\n        private actions$: Actions,\n        private postService: PostService\n    ) {}\n}","import * as _ from 'lodash';\nimport Stories from './models';\nimport * as actions from './story.actions';\nimport { createReducer, on } from \"@ngrx/store\"\nimport { NewspaperPost, NewspaperPosts, StoryCategory, StoryCategoryMap } from '../models/newspaper-post';\n\nexport const initialState: Stories = {\n    allStories: {\n        posts: []\n    }\n};\n\nconst getStateOnStoriesApiSuccess = (state: Stories, props: NewspaperPosts ) => {\n    let posts = state.allStories.posts.concat(props.posts) ;\n    return {\n        ...state,\n        allStories: {\n            posts\n        }\n    };\n};\n\n// const getStoryById = (state: Stories, props: String ) => {\n//     return state.allStories.posts.find( story => story._id === props);\n// }\n\nconst categorizeStories = (state: Stories, props: StoryCategoryMap) => {\n    let newState = [];\n    state.allStories.posts.map( story => {\n        let updatedStory: NewspaperPost;\n        if( props.storyIds.find( p => p === story._id)){\n            if(props.newCategory === StoryCategory.None){\n                updatedStory = {...story, storyCategory: null};\n            } else{\n                updatedStory = {...story, storyCategory: props.newCategory};\n                updatedStory.edition = props.edition;\n            }\n            newState.push(updatedStory);\n        } else {\n            newState.push(story);\n        }\n    });\n    return {...state, allStories: {posts: newState}};\n}\n\nconst updateStory = (state:Stories, props: NewspaperPost) => {\n    let newAllStories = _.cloneDeep(state.allStories);\n    let selectedStory = newAllStories.posts.find(story => story._id === props._id);\n    if(selectedStory){\n        let index = newAllStories.posts.indexOf(selectedStory);\n        newAllStories.posts.splice(index, 1, props);\n    }\n    return {allStories: newAllStories};\n}\n\nconst _storyReducer = createReducer(\n        initialState,\n        // on(actions.getStoryById, getStoryById),\n        on(actions.getAllStoriesSuccess, getStateOnStoriesApiSuccess),\n        on(actions.categorizeStories, categorizeStories),\n        on(actions.updateStory, updateStory)\n    );\n\nexport function getStoryReducer(state: Stories, action) {\n    return _storyReducer(state,action);\n}","import { createSelector } from \"@ngrx/store\";\nimport { NewspaperEdition } from '../models/editions';\nimport { NewspaperPost, StoryCategory } from '../models/newspaper-post';\n\nconst allStories = (state) => {\n    return state.newspaperStories.stories.allStories.posts;\n}\n\nexport const getStoryById = createSelector(allStories, (stories: NewspaperPost[], props: String) => {\n    return stories.find(story => story._id === props);\n});\n\nexport const getAssignedStories \n    = createSelector( allStories, \n        (stories: NewspaperPost[], props?) => {\n            if(props?.editionId){\n                return stories.filter(story => story.storyCategory !== undefined \n                    && story.storyCategory !== null\n                    && story.edition && story.edition._id === props.editionId);\n            } else {\n                return stories.filter(story => story.storyCategory !== undefined \n                    && story.storyCategory !== null);\n            }\n        });\n\nexport const getUnassignedStories \n    = createSelector( allStories, \n        (stories: NewspaperPost[]) => stories.filter(story => story.edition === undefined || story.edition === null));\n\nexport const getUnassignedToCurrentEdition \n        = createSelector( allStories, \n            (stories: NewspaperPost[], props: {editionId: string}) => {\n                // console.log(\"stories => \", stories, stories.map(s=> s.edition._id), props);\n                return stories.filter(story =>\n                    !story.edition || story.edition._id === null\n                    || story.edition._id === undefined\n                    || story.edition._id !== props.editionId\n                );\n            });        \n\nexport const getStoryByCateory = createSelector( allStories, (stories: NewspaperPost[], props: {category: StoryCategory, editionId: string}) => {\n    return stories.filter(story => story.storyCategory === props.category && story.edition && story.edition._id === props.editionId);\n});","import { Store } from '@ngrx/store';\nimport { Component, Inject, OnInit } from '@angular/core';\nimport { NewspaperEdition } from '../models/editions';\nimport { selectedEdition } from '../ngrx/edition.selectors';\nimport { getStoryByCateory } from '../ngrx/story.selectors';\nimport { NewspaperPost, StoryCategory } from '../models/newspaper-post';\nimport { DOCUMENT } from '@angular/common';\n\n@Component({\n  selector: 'app-nine-per-page-layout',\n  templateUrl: './nine-per-page-layout.component.html',\n  styleUrls: ['./nine-per-page-layout.component.css']\n})\nexport class NewspaperMainComponent implements OnInit {\n\n  storyGroups: Array<Array<NewspaperPost>>;\n\n  bannerStories: NewspaperPost[] = [];\n  currentEdition: NewspaperEdition;\n  window: Window;\n\n  constructor(private store: Store, \n    @Inject(DOCUMENT) private document: Document) { }\n\n  ngOnInit(): void {\n\n    this.window = this.document.defaultView;\n\n    this.store\n      .select(selectedEdition)\n      .subscribe((data: NewspaperEdition) => {\n        this.bannerStories = [];\n        this.storyGroups = [];\n        this.currentEdition = data;\n        if (data && data._id) {\n          this.store\n            .select(getStoryByCateory, { category: StoryCategory.Banner, editionId: data._id })\n            .subscribe((data) => {\n              if (data) {\n                if (data && data.length > 0 && data[0].edition._id === this.currentEdition._id) {\n                  this.bannerStories = this.bannerStories.concat(data);\n                  // this.bannerStories = this.bannerStories.concat(data);\n                }\n              }\n            });\n\n          this.store\n            .select(getStoryByCateory, { category: StoryCategory.Highlight, editionId: data._id })\n            .subscribe((data) => {\n              if (data) {\n                if (data && data.length > 0 && data[0].edition._id === this.currentEdition._id) {\n                  this.groupStories(data);\n                }\n              }\n            });\n\n            this.store\n            .select(getStoryByCateory, { category: StoryCategory.NewsBit, editionId: data._id })\n            .subscribe((data) => {\n              if (data) {\n                if (data && data.length > 0 && data[0].edition._id === this.currentEdition._id) {\n                  this.groupStories(data);\n                }\n              }\n            });\n        }\n      });\n  }\n\n  getSectionCssClassByRow(rowIndex: number, set: number):string{\n    if( (rowIndex % 2 === 0 && set === 1) || (rowIndex % 2 !== 0 && set === 2) ){\n      return \"col-2\";\n    } else {\n      return \"col-6\";\n    }\n  }\n\n  getStoryCssClassByRow(rowIndex: number, set: number):string{\n    if( (rowIndex % 2 === 0 && set === 1) || (rowIndex % 2 !== 0 && set === 2) ){\n      return \"col-12\";\n    } else {\n      return \"col-6\";\n    }\n  }\n\n  isValidForLeftSet(rowIndex: number, storyIndex: number):boolean{\n    if( (rowIndex % 2 === 0 && storyIndex < 2) || (rowIndex % 2 !== 0 && storyIndex < 6) ){\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  isValidForRightSet(rowIndex: number, storyIndex: number):boolean{\n    if( (rowIndex % 2 === 0 && storyIndex >= 2 && storyIndex < 8) || (rowIndex % 2 !== 0 && storyIndex >= 6 && storyIndex < 8) ){\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  storySelected(story: NewspaperPost){\n      this.document.getElementById(story._id).scrollIntoView({ block:'center', inline:'center', behavior: 'smooth'});\n  }\n\n  scrollTop(){\n    this.document.getElementById(\"home\").scrollIntoView({ block:'center', inline:'center', behavior: 'smooth'});\n  }\n\n  openUrl(story:NewspaperPost){\n    this.window.open(story.linkToPost, \"__blank\");\n  }\n\n  groupStories(availableStories: NewspaperPost[]){\n\n    if(!this.storyGroups){\n      this.storyGroups = new Array<Array<NewspaperPost>>();\n    }\n    let uniqueStories: NewspaperPost[] = this.getUniqueStories(availableStories);\n\n    for(let i=this.storyGroups.length; uniqueStories.length > 0; i++){\n      if(this.storyGroups[i-1] && this.storyGroups[i-1].length < 7){\n        // there is a deficit in the previous count of story groups. \n        // add stories to fill up the length to 9\n        let remainingStories = uniqueStories.splice(0,6-this.storyGroups[i-1].length); \n        this.storyGroups[i-1] = this.storyGroups[i-1].concat(remainingStories);\n      }\n      this.storyGroups[i] = uniqueStories.splice(0,6);\n    }\n\n  }\n\n  private getUniqueStories(availableStories: NewspaperPost[]){\n    let uniqueStories: NewspaperPost[] = [];\n    let allStories: NewspaperPost[] = [];\n    if(this.storyGroups ){\n      this.storyGroups.map( (sg) => {\n        allStories = allStories.concat(sg);\n      });\n  \n      availableStories.map(s => {\n        let x = allStories.find(as => as._id === s._id);\n        if(!!! x){\n          uniqueStories.push(s);\n        }\n      });\n    }\n\n    return uniqueStories;\n\n  }\n\n  formatDescription(str:string, length:number): string{\n    if(str.length > length){\n      return str.substring(0, length) + \"...\";\n    } else {\n      return str;\n    }\n  }\n\n  formatBannerText(str:string): string{\n    let bannerTextLength = 980;\n    let countOfNextLineChars = (str.split(\"\\n\\n\") || []).length * 76;\n    bannerTextLength = bannerTextLength - countOfNextLineChars;\n    if(str.length > length){\n      return str.substring(0, bannerTextLength) + \"...\";\n    } else {\n      return str;\n    }\n  }\n  // 76\n\n}\n","<span id=\"home\"></span>\n<div class=\"row page-margin\" *ngFor=\"let stories of storyGroups; let i=index\">\n    <ng-container *ngIf=\"bannerStories[i]; else secondaryLayout\">\n        <div [ngClass]=\"getSectionCssClassByRow(i,1)\">\n            <div class=\"row\">\n                <div [ngClass]=\"getStoryCssClassByRow(i,1)\" *ngFor=\"let story of stories; let storyIndex= index\">\n                    <app-story-card *ngIf=\"isValidForLeftSet(i, storyIndex)\" \n                        [story]=\"story\"\n                        [title]=\"story.title\" \n                        [description]=\"formatDescription(story.description, 227)\"\n                        (OnStorySelected) = \"storySelected($event)\"\n                    ></app-story-card>\n                    <div *ngIf=\"storyIndex === 0\">\n                        <hr />\n                    </div>\n                </div>  \n            </div>\n        </div>\n        \n        <div class=\"col-4\" *ngIf=\"bannerStories[i]\" >\n            <app-banner-story-card \n            [story] = bannerStories[i]\n            [storyContent]=\"formatBannerText(bannerStories[i].story)\"\n            (primaryAction)=\"storySelected($event)\"\n            ></app-banner-story-card>\n        </div>\n    \n        <div [ngClass]=\"getSectionCssClassByRow(i,2)\">\n            <div class=\"row\">\n                <div [ngClass]=\"getStoryCssClassByRow(i,2)\" *ngFor=\"let story of stories; let storyIndex= index\">\n                    <app-story-card *ngIf=\"isValidForRightSet(i, storyIndex)\" [title]=\"story.title\" \n                    [description]=\"formatDescription(story.description + ' ' + story.story, 420)\"\n                    [story]=\"story\"\n                    (OnStorySelected) = \"storySelected($event)\"\n                    ></app-story-card>\n                </div>  \n            </div>\n        </div>\n    </ng-container>\n\n    <ng-template #secondaryLayout>\n        <div class=\"col-4\" *ngFor=\"let story of stories\">\n            <app-story-card [title]=\"story.title\" \n            [description]=\"formatDescription(story.description + ' ' + story.story, 420)\"\n            [story]=\"story\"\n            (OnStorySelected) = \"storySelected($event)\"></app-story-card>\n        </div>  \n    </ng-template>\n\n    <div class=\"col-2\"></div>\n    <hr class=\"col-10\" />\n    <div class=\"col-2\"></div>\n</div>\n\n<div class=\"row\" *ngFor=\"let story of bannerStories\">\n        <div class=\"col-2\"[id]=\"story._id\" ></div>\n        <app-story-card class=\"col-8\"\n            showCardRaised=true \n            showHeaderAction=true\n            (headerActionClicked)=\"scrollTop()\"\n            [story]=story\n            [title]=\"story.title\" \n            [description]=\"story.description\"\n            [storyContent]=\"story.story\"\n            primaryActionTitle=\"Read complete story\"\n            (OnStorySelected) = \"openUrl($event)\"\n        ></app-story-card>\n        <div class=\"col-2\"></div>\n</div>\n<ng-container *ngFor=\"let stories of storyGroups\">\n    <div class=\"row\" *ngFor=\"let story of stories\" >\n        <div class=\"col-2\" [id]=\"story._id\" ></div>\n        <app-story-card  class=\"col-8\"\n        showCardRaised=true \n        showHeaderAction=true\n        [story]=story\n        (headerAction)=\"scrollTop()\"\n        [title]=\"story.title\" \n        [description]=\"story.description\"\n        [storyContent]=\"story.story\"\n        primaryActionTitle=\"Read complete story\"\n        (OnStorySelected) = \"openUrl($event)\"\n        ></app-story-card>\n        <div class=\"col-2\"></div>\n    </div>\n</ng-container>","import { Inject } from '@angular/core';\nimport { Component, OnInit } from '@angular/core';\nimport { NewspaperPost } from '../models/newspaper-post';\nimport { MatBottomSheetRef, MAT_BOTTOM_SHEET_DATA } from '@angular/material/bottom-sheet';\n\n@Component({\n  selector: 'app-post-details',\n  templateUrl: './post-details.component.html',\n  styleUrls: ['./post-details.component.css']\n})\nexport class PostDetailsComponent implements OnInit {\n\n  constructor(@Inject(MAT_BOTTOM_SHEET_DATA) public data: NewspaperPost,\n    private matBottomSheet: MatBottomSheetRef<PostDetailsComponent>) { }\n\n  ngOnInit(): void {\n    \n  }\n\n  close(){\n    this.matBottomSheet.dismiss();\n  }\n\n}\n","<div>\n    <button mat-button (click)=\"close()\"> <mat-icon>close</mat-icon> </button>\n    <div *ngIf=\"data\">\n        <div  class=\"row\">\n            <strong>\n                {{data.title}}\n            </strong>\n        </div>\n\n        <div class=\"row\">\n            {{data.description}}\n        </div>\n\n        <div class=\"row\">\n            {{data.story}}\n        </div>\n    \n        <a  class=\"row\" tabindex=\"-1\" [href]=\"data.linkToPost\" target=\"_blank\">\n            Read full article\n        </a>\n    </div>\n\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<form formGroup=\"\" class=\"row\">\n    <span class=\"col-2\"></span>\n    <div class=\"col-8\">\n        <div class=\"row\">\n            <h1>Register to Login</h1>\n        </div>\n        <div class=\"row\">\n            <mat-form-field class=\"col-6\">\n                <mat-label> Full Name</mat-label>\n                <input matInput>\n            </mat-form-field>\n            <mat-form-field class=\"col-6\">\n                <mat-label> E-mail</mat-label>\n                <input matInput type=\"email\">\n            </mat-form-field>\n            <mat-form-field class=\"col-6\">\n                <mat-label> Password</mat-label>\n                <input matInput type=\"password\">\n            </mat-form-field>\n            <mat-form-field class=\"col-6\">\n                <mat-label> Twitter Handle</mat-label>\n                <input matInput>\n            </mat-form-field>\n            <mat-form-field class=\"col-6\">\n                <mat-label> LinkedIn URL</mat-label>\n                <input matInput>\n            </mat-form-field>\n            <mat-form-field class=\"col-6\">\n                <mat-label> Bio</mat-label>\n                <textarea matInput rows=\"4\"></textarea>\n            </mat-form-field>\n        </div>\n        <div class=\"row\">\n            <button mat-button color=\"primary\">Submit</button>\n            <button mat-button >Cancel</button>\n        </div>\n    </div>\n    <span class=\"col-2\"></span>\n</form>","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { NewspaperEdition } from '../models/editions';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EditionService {\n\n  constructor(private httpClient: HttpClient) { }\n\n  create(edition: NewspaperEdition){\n    return this.httpClient\n      .post<NewspaperEdition>('/newspaper-edition', edition);\n  }\n\n  getAll(){\n    return this.httpClient\n      .get<NewspaperEdition[]>('/newspaper-edition');\n  }\n\n  \n  \n}\n","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { NewspaperPost, NewspaperPosts } from 'src/app/newspaper/models/newspaper-post';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PostService {\n\n  constructor(private httpClient: HttpClient) { }\n\n  getBanners(){\n    return this.httpClient.get('/storage');\n  }\n\n  create(post: NewspaperPost){\n    return this.httpClient\n      .post<NewspaperPost>('/newspaper-post',post);\n  }\n\n  getActiveStories() : Observable<NewspaperPost[]> {\n    return this.httpClient\n      .get<NewspaperPost[]>('/newspaper-post');\n  }\n\n  updateStoriesForEdition(posts: NewspaperPosts){\n    return this.httpClient\n      .post('/newspaper-post/add-posts-to-edition',posts.posts);\n  }\n\n  updatePost(post: NewspaperPost){\n    return this.httpClient\n      .post<NewspaperPost>('/newspaper-post/update-post',post);\n  }\n\n}\n","import { Subject } from 'rxjs';\nimport { Store } from '@ngrx/store';\nimport { takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\nimport { NewspaperEdition } from '../models/editions';\nimport { selectedEdition } from '../ngrx/edition.selectors';\nimport { getStoryByCateory } from '../ngrx/story.selectors';\nimport { MatBottomSheet } from '@angular/material/bottom-sheet';\nimport { Component, Inject, OnDestroy, OnInit } from '@angular/core';\nimport { NewspaperPost, StoryCategory } from '../models/newspaper-post';\nimport { PostDetailsComponent } from '../post-details/post-details.component';\n\n@Component({\n  selector: 'app-single-column-layout',\n  templateUrl: './single-column-layout.component.html',\n  styleUrls: ['./single-column-layout.component.css']\n})\nexport class SingleColumnLayoutComponent implements OnInit, OnDestroy {\n\n  window: Window;\n  showHideHelpTextCss=\"show\";\n  currentEditon: NewspaperEdition;\n  bannerStories: NewspaperPost[] = [];\n  newsbitStories: NewspaperPost[] = [];\n  highlightStories: NewspaperPost[] = [];\n\n  destory$ = new Subject<void>();\n\n  constructor(private store: Store, \n    @Inject(DOCUMENT) private document: Document,\n    private dialog: MatBottomSheet) { }\n\n  ngOnInit(): void {\n\n    this.window = this.document.defaultView;\n\n    this.store\n      .select(selectedEdition)\n      .subscribe((ne: NewspaperEdition) => {\n        this.currentEditon = ne;\n        this.resetStories();\n        if (ne && ne._id) {\n          this.store\n            .select(getStoryByCateory, { category: StoryCategory.Banner, editionId: ne._id })\n            .pipe(takeUntil(this.destory$))\n            .subscribe((bnSt: NewspaperPost[]) => {\n              if (bnSt && bnSt.length > 0 && bnSt[0].edition._id === this.currentEditon._id) {\n                this.bannerStories = bnSt;\n              }\n            });\n\n          this.store\n            .select(getStoryByCateory, { category: StoryCategory.Highlight, editionId: ne._id })\n            .pipe(takeUntil(this.destory$))\n            .subscribe((nph: NewspaperPost[]) => {\n              if (nph && nph.length > 0 && nph[0].edition._id === this.currentEditon._id) {\n                this.highlightStories = nph;\n              }\n            });\n\n            this.store\n            .select(getStoryByCateory, { category: StoryCategory.NewsBit, editionId: ne._id })\n            .pipe(takeUntil(this.destory$))\n            .subscribe((nnb: NewspaperPost[]) => {\n              if (nnb && nnb.length > 0 && nnb[0].edition._id === this.currentEditon._id) {\n                this.newsbitStories = nnb;\n              }\n            });\n        }\n      });\n  }\n\n  formatDescription(str:string, length:number): string{\n    if(str.length > length){\n      return str.substring(0, length) + \"...\";\n    } else {\n      return str;\n    }\n  }\n\n  ngOnDestroy(){\n    this.destory$.complete();\n\n  }\n\n  openUrl(story:NewspaperPost){\n    this.window.open(story.linkToPost, \"__blank\");\n  }\n\n  showModelDialog(story: NewspaperPost){\n    this.dialog.open(PostDetailsComponent, {\n      data: story\n    });\n  }\n\n  resetStories(){\n    this.bannerStories = [];\n    this.newsbitStories = [];\n    this.highlightStories = [];\n  }\n\n  closeHelpInfo(){\n    this.showHideHelpTextCss=\"hide\";\n  }\n\n}\n","<div class=\"small-font\" *ngFor=\"let story of bannerStories; let i = index\" >\n    <app-banner-story-card \n    [story] = story\n    [storyContent]= \"story.story\"\n    (primaryAction)=\"openUrl(story)\"\n    primaryActionTitle=\"Read Article\"\n    [showCardRaised]=true\n    ></app-banner-story-card>\n    <div *ngIf=\"i === 0 || i === 3\" class=\"horizontal-scroll-container\">\n        <div class=\"info-container\" [ngClass]=\"showHideHelpTextCss\" (click)=\"closeHelpInfo()\">\n            <div class=\"info-message\">\n                Scroll for more <br/>\n                <mat-icon class=\"big-icon\">swap_horizontal_circle</mat-icon>\n            </div>\n        </div>\n        <div class=\"card-container\" *ngFor=\"let story of highlightStories\">\n            <app-story-card [story]=\"story\" \n             [showCardRaised]=false  \n             [title]=\"story.title\" \n             [description]=\"formatDescription(story.description, 300)\"\n             (OnStorySelected)=\"showModelDialog($event)\"\n             ></app-story-card>\n        </div>\n    </div>\n</div>\n\n<div class=\"story-list\" *ngFor=\"let story of newsbitStories\">\n    <app-story-card \n        [story]=\"story\" \n        [title]=\"story.title\" \n        [showCardRaised]=true \n        [storyContent]=\"story.story\"\n        primaryActionTitle=\"Read Article\"\n        [description]=\"story.description\" \n        (OnStorySelected)=\"openUrl(story)\"\n        ></app-story-card>\n</div>\n","import { NewspaperPost } from '../models/newspaper-post';\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-story-card',\n  templateUrl: './story-card.component.html',\n  styleUrls: ['./story-card.component.css']\n})\nexport class StoryCardComponent implements OnInit {\n\n  @Input() showCardRaised = false;\n  @Input() story: NewspaperPost;\n  @Input() title: string;\n  @Input() description: string;\n  @Input() storyContent: string;\n  @Input() customActionTitle: string;\n  @Input() showHeaderAction: boolean = false;\n  @Input() primaryActionTitle = \"more\"\n  @Output() headerAction= new EventEmitter();\n  @Output() OnStorySelected = new EventEmitter<NewspaperPost>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  OnMoreSelect(){\n    this.OnStorySelected.emit(this.story);\n  }\n\n  headerActionClicked(){\n    this.headerAction.emit(true);\n  }\n\n  customAction(){\n  }\n\n}\n","<mat-card [ngClass]=\"showCardRaised?'mat-elevation-z2':'mat-elevation-z0'\">\n    <mat-card-header>\n        <div class=\"row\">\n            <mat-card-title class=\"col-10\">{{title}}</mat-card-title>\n            <button class=\"col-2\" mat-button *ngIf=\"showHeaderAction\" (click)=\"headerActionClicked()\">\n                <mat-icon>keyboard_arrow_up</mat-icon>\n            </button>\n        </div>\n    </mat-card-header>\n    <mat-card-content>\n        <div>\n            {{description}}\n        </div>\n        <div *ngIf=\"storyContent\">\n            {{storyContent}}\n        </div>\n    </mat-card-content>\n    \n    <mat-card-actions>\n        <button mat-button (click)=\"OnMoreSelect()\">{{primaryActionTitle}}</button>\n        <button mat-button (click)=\"customAction()\" *ngIf=\"customActionTitle\">{{customActionTitle}}</button>\n    </mat-card-actions>\n</mat-card>","import { NewspaperPost } from 'src/app/newspaper/models/newspaper-post';\nimport { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-story-list',\n  templateUrl: './story-list.component.html',\n  styleUrls: ['./story-list.component.css']\n})\nexport class StoryListComponent implements OnInit {\n\n  @Input(\"Title\") listTitle: string = '';\n  @Input(\"Stories\") stories: Array<NewspaperPost>;\n  @Input(\"IsRemoveEnabled\") remove: boolean = false;\n  @Output(\"SelectedPost\") selectedPost = new EventEmitter<NewspaperPost>();\n  @Output(\"RemovedPost\") removedPost = new EventEmitter<NewspaperPost>();\n\n\n  constructor() { }\n  ngOnInit(): void { }\n\n  onSelect(post: NewspaperPost){\n    this.selectedPost.emit(post);\n  }\n\n  removeItem(item: NewspaperPost){\n    this.stories.splice(this.stories.indexOf(item),1);\n    this.removedPost.emit(item);\n  }\n\n}\n","<h1>{{listTitle}}</h1>\n<mat-list>\n    <mat-list-item *ngFor=\"let post of stories\"  class=\"row\" (click)=\"onSelect(post)\">\n        <strong class=\"col-10\"> {{post.title}} </strong>\n        <mat-icon *ngIf=\"remove\" class=\"col-2\" (click)=\"removeItem(post)\">close</mat-icon>\n        <mat-divider class=\"col-12\"></mat-divider>\n    </mat-list-item>\n</mat-list>","import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { NewspaperPost } from '../models/newspaper-post';\nimport { getAllStories, updateStoryJson } from '../ngrx/story.actions';\nimport { getAssignedStories, getUnassignedStories} from '../ngrx/story.selectors';\n\n@Component({\n  selector: 'app-update-posts',\n  templateUrl: './update-posts.component.html',\n  styleUrls: ['./update-posts.component.css']\n})\nexport class UpdatePostsComponent implements OnInit {\n\n  stories: NewspaperPost[] = [];\n  story: string=\"\";\n\n  constructor(private store: Store) { }\n\n  ngOnInit(): void {\n\n    this.store.dispatch(getAllStories());\n\n    this.store\n    .select(getAssignedStories)\n    .subscribe((data) => {\n      this.stories = this.stories.concat(data);\n    });\n\n    this.store\n    .select(getUnassignedStories)\n    .subscribe((data) => {\n      this.stories = this.stories.concat(data);\n    });\n  }\n\n  onSelectTopBanner($event){\n    this.story = JSON.stringify($event, null, 4);\n  }\n\n  updateJsonText($event){\n    this.story = $event.target.value;\n  }\n\n  savePost(){\n    this.store.dispatch(updateStoryJson(JSON.parse(this.story) as NewspaperPost) )\n  }\n\n}\n","<!-- <div fxLayout='row' class=\"zero\">\n\n    <div fxFlex class=\"one\">1</div>\n    <div fxFlex=\"33%\" fxLayout='column' class=\"two\">\n\n        <div fxFlex class=\"two_one\">2.1</div>\n        <div fxFlex class=\"two_two\">2.2</div>\n        <div fxFlex class=\"two_three\">2.3</div>\n\n    </div>\n    <div fxFlex class=\"three\">3</div>\n\n</div> -->\n<div class=\"row\">\n    <div class=\"col-8\"></div>\n    <button class=\"col-2\" mat-button (click)=\"savePost()\"> Save </button>\n    <div class=\"col-2\"></div>\n</div>\n\n<div class=\"row\">\n    <app-story-list [Stories]=\"stories\" \n        Title=\"Available Stories\" \n        class=\"col-4\"\n        (SelectedPost)=\"onSelectTopBanner($event)\">\n    </app-story-list>\n    \n    <textarea class=\"col-6\" (change)=\"updateJsonText($event)\" rows=\"20\" [value]=\"story\"></textarea>\n    \n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent {\n  pages = [{\n    path: 'blog',\n    label: \"Blog\"\n  },\n  {\n    path: 'books',\n    label: \"Books\"\n  },\n  {\n    path: 'applications',\n    label: 'Applications'\n  },\n  {\n    path: 'about',\n    label: \"About Me!\"\n  }];\n}\n","<div class=\"fixed-header\">\n    <sc-toolbar></sc-toolbar>\n    <nav mat-tab-nav-bar>\n        <a mat-tab-link *ngFor=\"let page of pages\" [routerLink]=\"page.path\" routerLinkActive #rla=\"routerLinkActive\"\n            [active]=\"rla.isActive\">{{page.label}} </a>\n    </nav>\n</div>\n<div class=\"root-node\">\n    <router-outlet></router-outlet>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.css']\n})\nexport class AboutComponent implements OnInit {\n\n  color1 = \"skyblue\";\n  color2 = \"#F4EAE8\";\n  color3 = \"lightpink\";\n  color4 = \"lightgreen\";\n  color5 = \"#FEBDB0\"\n\n  introParagraph = \"<i>I've</i> been in software development for over 17 years.\" + \n  \"<br />I'm a three-time Microsoft MVP and the author of a two books, and several technology articles from Dot Net Curry and DNC magazine.\" + \n  \"I hold a master's degree in software systems from the University of St. Thomas, Minneapolis and St. Paul, USA.\";\n\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<div class=\"row\">\n\n    <div class=\"col-md-5 col-lg-3\">\n        <mat-card>\n            <img mat-card-image src=\"assets/profile-pic.jpg\" class=\"book-image\" alt=\"profile picture\">\n\n            <mat-card-header>\n                <mat-card-title>Venkata Keerti Kotaru</mat-card-title>\n                <mat-card-subtitle>Author, Three time Microsoft MVP and a blogger</mat-card-subtitle>\n            </mat-card-header>\n        </mat-card>\n    </div>\n    <div class=\"col-md-6 col-lg-8\">\n        <p class=\"d-none d-lg-block\">\n            <mat-grid-list cols=\"3\" rowHeight=\"220px\">\n                <mat-grid-tile colspan=\"2\" [style.background]=\"color5\">\n                    <span [innerHtml]=\"introParagraph\"></span>\n                </mat-grid-tile>\n                <a href=\"https://www.linkedin.com/in/keertikotaru/\" target=\"__blank\">\n                    <mat-grid-tile [style.background]=\"color1\">\n                        <img src=\"assets/Linkedin.png\" class=\"img-logo\" alt=\"LinkedIn logo\">\n                        <div class=\"link\">\n                            View LinkedIn Profile\n                        </div>\n                    </mat-grid-tile>\n                </a>\n                <a href=\"https://twitter.com/keertikotaru\" target=\"__blank\">\n                    <mat-grid-tile [style.background]=\"color2\">\n                        <img src=\"assets/twitter.png\" class=\"img-logo\" alt=\"LinkedIn logo\">\n                        <div class=\"link\">\n                            Follow on Twitter\n                        </div>\n                    </mat-grid-tile>\n                </a>\n                <a href=\"https://github.com/kvkirthy/\" target=\"__blank\">\n\n                    <mat-grid-tile [style.background]=\"color3\">\n                        <img src=\"assets/github.png\" class=\"img-logo\" alt=\"LinkedIn logo\">\n                        <div class=\"link\">\n                            Github Profile\n                        </div>\n                    </mat-grid-tile>\n                </a>\n                <a href=\"https://stackoverflow.com/users/2955455/vencki\" target=\"__blank\">\n                    <mat-grid-tile [style.background]=\"color4\">\n                        <img src=\"assets/stackoverflow.png\" class=\"img-logo\" alt=\"LinkedIn logo\">\n                        <div class=\"link\">\n                            Stackoverflow Profile\n                        </div>\n                    </mat-grid-tile>\n                </a>\n\n            </mat-grid-list>\n        </p>\n        <p class=\"d-lg-none d-sm-block\">\n            <mat-grid-list cols=\"1\" rowHeight=\"240px\" class=\"single-item\">\n                <mat-grid-tile [style.background]=\"color5\">\n                    <span [innerHtml]=\"introParagraph\"></span>\n                </mat-grid-tile>\n            </mat-grid-list>\n            <mat-grid-list cols=\"1\" rowHeight=\"120px\" gutterSize=\"5px\">\n                <a href=\"https://www.linkedin.com/in/keertikotaru/\" target=\"__blank\">\n                    <mat-grid-tile [style.background]=\"color1\">\n                        <img src=\"assets/Linkedin.png\" class=\"img-logo\" alt=\"LinkedIn logo\">\n                        <div class=\"link\">\n                            View LinkedIn Profile\n                        </div>\n                    </mat-grid-tile>\n                </a>\n                <a href=\"https://twitter.com/keertikotaru\" target=\"__blank\">\n                    <mat-grid-tile [style.background]=\"color2\">\n                        <img src=\"assets/twitter.png\" class=\"img-logo\" alt=\"LinkedIn logo\">\n                        <div class=\"link\">\n                            Follow on Twitter\n                        </div>\n                    </mat-grid-tile>\n                </a>\n                <a href=\"https://github.com/kvkirthy/\" target=\"__blank\">\n\n                    <mat-grid-tile [style.background]=\"color3\">\n                        <img src=\"assets/github.png\" class=\"img-logo\" alt=\"LinkedIn logo\">\n                        <div class=\"link\">\n                            Github Profile\n                        </div>\n                    </mat-grid-tile>\n                </a>\n                <a href=\"https://stackoverflow.com/users/2955455/vencki\" target=\"__blank\">\n                    <mat-grid-tile [style.background]=\"color4\">\n                        <img src=\"assets/stackoverflow.png\" class=\"img-logo\" alt=\"LinkedIn logo\">\n                        <div class=\"link\">\n                            Stackoverflow Profile\n                        </div>\n                    </mat-grid-tile>\n                </a>\n\n            </mat-grid-list>\n        </p>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-applications',\n  templateUrl: './applications.component.html',\n  styleUrls: ['./applications.component.css']\n})\nexport class ApplicationsComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"row\">\n    <mat-card class=\"col-xs-12 col-md-6\">\n        <mat-card-header>\n            <mat-card-title>\n                COVID India Visualization\n            </mat-card-title>\n            <mat-card-subtitle>\n                Bubble chart shows COVID data for all the states. Allows filter through and zoom in.\n            </mat-card-subtitle>\n        </mat-card-header>\n        <img src=\"/assets/covid-asset.png\" mat-card-image alt=\"\">\n        <mat-card-footer>\n            <a mat-button color=\"primary\" href=\"https://github.com/kvkirthy/covid-sample/tree/develop\" target=\"app\">Code</a>\n            <a mat-button color=\"primary\" href=\"https://kvkirthy.github.io/covid-sample/\" target=\"app\">Launch</a>\n        </mat-card-footer>\n    </mat-card>\n</div>","import * as _ from 'lodash';\nimport { of, Observable } from 'rxjs';\nimport { BlogsService } from './blogs.service';\nimport { Component, OnInit } from '@angular/core';\nimport { Blog } from 'src/app/showcase/models/blog';\n\n@Component({\n  selector: 'app-blogs',\n  templateUrl: './blogs.component.html',\n  styleUrls: ['./blogs.component.css']\n})\nexport class BlogsComponent implements OnInit {\n\n  blogList$: Observable<Array<Blog>>;\n  highlightedBlog: Blog;\n  constructor(private blogService: BlogsService) { }\n\n  ngOnInit() {\n    let allBlogs = [];\n    this.blogService\n      .getBlogs()\n      .subscribe(data => {\n        allBlogs = data.sort( (a,b) =>  (a.dateAdded && b.dateAdded) ? a.dateAdded.localeCompare(b.dateAdded): 0);\n        allBlogs = allBlogs.reverse();\n        this.highlightedBlog = allBlogs.find(i => i.isHighlighted);\n        if( !!! this.highlightedBlog ){\n          allBlogs[0].isHighlighted = true;\n          this.highlightedBlog = allBlogs[0];\n        }\n\n        this.blogList$ = of(allBlogs.filter(i => !i.isHighlighted ));\n      });\n  }\n\n  cardClickHandler(linkToBlog){\n    window.open(linkToBlog, \"__blog\");\n  }\n\n  formatDate(dateValue: string){\n    let d = new Date(dateValue) \n    return d.toDateString();\n  }\n\n}\n","<div class=\"d-none d-lg-block\">\n    <div class=\"row\">\n        <div class=\"col-sm-4 primary-card\" *ngIf=\"highlightedBlog\">\n            <mat-card (click)=\"cardClickHandler(highlightedBlog.linkToBlog)\">\n                <img mat-card-image [src]=\"highlightedBlog.bannerImage\">\n                <mat-card-header>\n                    <mat-card-title>{{highlightedBlog.title}}\n                        <mat-icon color=\"accent\">fiber_new</mat-icon>\n                        <div>\n                            <mat-card-subtitle>{{ formatDate(highlightedBlog.dateAdded)}}</mat-card-subtitle>\n                        </div>\n                    </mat-card-title>\n                </mat-card-header>\n                <mat-card-content>{{highlightedBlog.description}}</mat-card-content>\n            </mat-card>\n        </div>\n\n        <div class=\"col-sm-8\">\n            <div class=\"row\">\n                <ng-container *ngFor=\"let blog of blogList$ | async; let i=index\">\n                    <div class=\"col-md-6 small-cards-recent\">\n                        <mat-card *ngIf=\"i < 4\" (click)=\"cardClickHandler(blog.linkToBlog)\">\n                            <mat-card-header>\n                                <img mat-card-avatar [src]=\"blog.imageUrl\">\n                                <mat-card-subtitle>\n                                    <div>\n                                        {{blog.title}}\n                                    </div>\n                                    <div>\n                                        {{formatDate(blog.dateAdded)}}\n                                    </div>\n                                </mat-card-subtitle>\n                            </mat-card-header>\n                            <mat-card-content>{{blog.description}}</mat-card-content>\n                        </mat-card>\n                    </div>\n                </ng-container>\n            </div>\n        </div>\n    </div>\n    <div class=\"row\">\n        <ng-container *ngFor=\"let blog of blogList$ | async; let i=index\">\n            <div *ngIf=\"i >= 4\" class=\"col-sm-4 small-cards\">\n                <mat-card (click)=\"cardClickHandler(blog.linkToBlog)\">\n                    <mat-card-header>\n                        <img mat-card-avatar [src]=\"blog.imageUrl\">\n                        <mat-card-subtitle>\n                            {{blog.title}}\n                        </mat-card-subtitle>\n                    </mat-card-header>\n                    <mat-card-content>{{blog.description}}</mat-card-content>\n                </mat-card>\n            </div>\n        </ng-container>\n    </div>\n</div>\n<div class=\"d-xs-block d-lg-none\">\n    <div class=\"row\">\n        <div class=\"col-sm-10\" *ngIf=\"highlightedBlog\">\n            <mat-card (click)=\"cardClickHandler(highlightedBlog.linkToBlog)\">\n                <img mat-card-image [src]=\"highlightedBlog.bannerImage\">\n\n                <mat-card-header>\n                    <mat-card-title>{{highlightedBlog.title}}\n                        <mat-icon color=\"accent\">fiber_new</mat-icon>\n                    </mat-card-title>\n                    <mat-card-subtitle *ngIf=\"highlightedBlog.dateAdded\">\n                        {{formatDate(highlightedBlog.dateAdded)}}\n                    </mat-card-subtitle>\n                </mat-card-header>\n                <mat-card-content>{{highlightedBlog.description}}</mat-card-content>\n            </mat-card>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col-md-10\">\n            <ng-container *ngFor=\"let blog of blogList$ | async;\">\n                <mat-card (click)=\"cardClickHandler(blog.linkToBlog)\">\n                    <mat-card-header>\n                        <img mat-card-avatar class=\"avatar\" [src]=\"blog.imageUrl\">\n                        <mat-card-subtitle>\n                            <div>\n                                {{blog.title}}\n                            </div>\n                            <div *ngIf=\"blog.dateAdded\">\n                                {{formatDate(blog.dateAdded)}}\n                            </div>\n                        </mat-card-subtitle>\n                    </mat-card-header>\n                    <mat-card-content>{{blog.description}}</mat-card-content>\n                </mat-card>\n            </ng-container>\n        </div>\n\n    </div>\n</div>","import { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Blog } from 'src/app/showcase/models/blog';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BlogsService {\n\n  constructor(private httpClient: HttpClient) { }\n\n  getBlogs(): Observable<Blog[]>{\n    return this.httpClient\n      .get<Blog[]>('/blog-posts');\n  }\n\n  getAllAvatars(): Observable<Array<string>> {\n    return this.httpClient\n      .get<Array<string>>('/storage/avatars');\n  }\n\n  getAllBanners(): Observable<Array<string>> {\n    return this.httpClient\n      .get<Array<string>>('/storage');\n  }\n\n  create(blog: Blog) {\n    return this.httpClient.post('/blog-posts',blog);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-books',\n  templateUrl: './books.component.html',\n  styleUrls: ['./books.component.css']\n})\nexport class BooksComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<div class=\"row\">\n  <div class=\"col-md-3\"></div>\n  <div class=\"col-md-3 col-sm-12\">\n    <mat-card>\n      <img mat-card-image src=\"assets/book-2.jpg\" class=\"book-image\" alt=\"Angular 2 book\">\n      <!-- <mat-card-header> -->\n        <!-- <mat-card-subtitle>\n          Build Angular applications faster and better with TypeScript and Material Design.\n        </mat-card-subtitle>\n      </mat-card-header> -->\n\n      <mat-card-actions class=\"small-text\">\n        <a mat-button href=\"https://www.apress.com/us/book/9781484254332\" target=\"__blank\" color=\"primary\">Apress</a>\n        <a mat-button\n          href=\"https://www.amazon.com/Angular-Material-Design-TypeScript-Interface/dp/1484254333/ref=sr_1_3?keywords=angular+material&qid=1578191826&sr=8-3\"\n          target=\"__blank\" color=\"primary\">Amazon</a>\n        <a mat-button href=\"https://github.com/kvkirthy/superheroes\" target=\"__blank\" color=\"primary\">Samples</a>\n      </mat-card-actions>\n    </mat-card>\n  </div>\n\n  <div class=\"col-md-3 col-sm-12\">\n    <mat-card>\n      <img mat-card-image src=\"assets/book-1.jpg\" class=\"book-image\" alt=\"Angular 2 book\">\n      <!-- <mat-card-header>\n        <mat-card-subtitle>\n          Build applications with AngularJS (version 1.x) and Material Design. Uses Angular Material library.\n        </mat-card-subtitle>\n      </mat-card-header> -->\n      <mat-card-actions class=\"small-text\">\n        <a mat-button href=\"https://www.apress.com/us/book/9781484221891\" target=\"__blank\" color=\"primary\">Apress</a>\n        <a mat-button href=\"https://www.amazon.com/dp/B01L17B8LK/ref=rdr_kindle_ext_tmb\" target=\"__blank\"\n          color=\"primary\">Amazon</a>\n        <a mat-button href=\"https://github.com/kvkirthy/Angular-Material-Samples\" target=\"__blank\"\n          color=\"primary\">Samples</a>\n      </mat-card-actions>\n    </mat-card>\n  </div>\n  <div class=\"col-md-3\"></div>\n\n</div>","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { BlogsService } from 'src/app/showcase/pages/blogs/blogs.service';\nimport { AlertHelperService } from 'src/app/components/alert-helper.service';\n\n@Component({\n  selector: 'app-create-blog',\n  templateUrl: './create-blog.component.html',\n  styleUrls: ['./create-blog.component.css']\n})\nexport class CreateBlogComponent implements OnInit {\n\n  createPostFormGroup: FormGroup;\n  avatars: string[] = [];\n  banners: string[] = []\n\n  constructor(private blogSvc: BlogsService,\n    private formBuilder: FormBuilder,\n    private alertHelper: AlertHelperService) { \n      this.createPostFormGroup = this.formBuilder.group({\n        title: ['', Validators.required],\n        story: ['', Validators.required],\n        avatar: ['', Validators.required],\n        bannerImage: [''],\n        linkToPost: ['', [Validators.required, Validators.pattern(/https?:\\/\\/(.*)/gi)] ]\n      });\n    }\n\n  ngOnInit(): void {\n    this.blogSvc\n      .getAllAvatars()\n      .subscribe( re => {\n        this.avatars = re;\n        this.blogSvc\n           .getAllBanners()\n           .subscribe( re => this.banners = re);\n\n      });\n\n    \n  }\n\n  get title(){\n    return this.createPostFormGroup.get('title');\n  }\n\n  get story(){\n    return this.createPostFormGroup.get('story');\n  }\n\n  get avatar(){\n    return this.createPostFormGroup.get('avatar');\n  }\n\n  get bannerImage(){\n    return this.createPostFormGroup.get('bannerImage');\n  }\n\n  get linkToPostValue(){\n    let value:string = this.createPostFormGroup.get('linkToPost').value;\n    return value;\n  }\n\n  submit(){\n    if(this.createPostFormGroup.valid){\n      this.blogSvc.create({\n        title: this.title.value,\n        description: this.story.value,\n        imageUrl: this.avatar.value,\n        linkToBlog: this.linkToPostValue,\n        bannerImage: this.bannerImage.value,\n        dateAdded: new Date().toISOString()\n      }).subscribe((result) => {\n        if(result['_id']){\n          this.reset();\n          this.alertHelper.showAlertWithClose(\"Thank you for your contribution.\");\n        } else {\n          this.alertHelper.showAlertWithClose(\"Something wrong! Post not created\");\n        }\n      }, error =>  this.alertHelper.showAlertWithClose(`Something wrong! ${JSON.stringify(error)}`));\n    } else {\n      this.alertHelper.showAlertWithClose(\"Please provide correct values for the post\");\n    }\n  }\n\n  cancel() {\n    this.reset();\n  }\n  \n  private reset(){\n    this.createPostFormGroup.reset();\n    Object.keys(this.createPostFormGroup.controls).forEach(key => {\n      this.createPostFormGroup.controls[key].setErrors(null)\n    });\n  }\n\n}\n","<form [formGroup]=\"createPostFormGroup\" class=\"row\">\n<!-- <form class=\"row\"> -->\n    <span class=\"col-sm-1 col-md-3\"></span>\n    <div class=\"col-xs-12 col-sm-10 col-md-6\">\n        <div class=\"row\">\n            <!-- <div class=\"col-sm-1 col-md-3\"></div>\n            <h1 class=\"col-sm-10 col-md-6\">Contribute a Post</h1>\n            <div class=\"col-sm-1 col-md-3\"></div> -->\n            <h1>Create A New Blog</h1>\n        </div>\n        <div class=\"row\">\n            <!-- <input type=\"text\" matInput id=\"title\" name=\"title\" formControl=\"title\"  matInput> -->\n\n            <mat-form-field class=\"col-12\" id=\"title\" name=\"title\" >\n                <mat-label> Title</mat-label>\n                <input type=\"text\" formControlName=\"title\" matInput>\n                <mat-hint>  Provide a title </mat-hint> \n            </mat-form-field>\n            <mat-form-field id=\"description\" name=\"description\"  class=\"col-12\">\n                <mat-label>Detailed Story</mat-label>\n                <textarea matInput formControlName=\"story\" rows=\"10\"></textarea>\n                <mat-hint> Tell us your story! </mat-hint> \n            </mat-form-field>\n            <mat-form-field id=\"url\" name=\"url\" class=\"col-12\">\n                <mat-label>Link</mat-label>\n                <input type=\"url\" formControlName=\"linkToPost\" matInput>\n                <mat-hint>Link to the post </mat-hint> \n            </mat-form-field>\n            <label class=\"radio-label\" for=\"avatar\">Select Avatar</label>\n            <mat-radio-group class=\"col-12\" formControlName=\"avatar\">\n                <mat-radio-button checked=\"false\" [value]=\"av\" *ngFor=\"let av of avatars\">\n                    <img class=\"avatar\" [src]=\"av\" [alt]=\"av\" />\n                </mat-radio-button>\n            </mat-radio-group>\n            <label class=\"radio-label\" for=\"banners\">Select Banners</label>\n            <mat-radio-group class=\"col-12\" formControlName=\"bannerImage\">\n                <mat-radio-button checked=\"false\" [value]=\"bn\" *ngFor=\"let bn of banners\">\n                    <img class=\"banner-preview\" [src]=\"bn\" [alt]=\"bn\" />\n                </mat-radio-button>\n            </mat-radio-group>\n        </div>\n        <div class=\"row actions-row\">\n            <button type=\"submit\" mat-button (click)=\"submit()\" color=\"primary\">Submit</button>\n            <button mat-button (click)=\"cancel()\">Cancel</button>\n        </div>\n    </div>\n    <span class=\"col-sm-1 col-md-3\"></span>\n</form>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-opinion',\n  templateUrl: './opinion.component.html',\n  styleUrls: ['./opinion.component.css']\n})\nexport class OpinionComponent implements OnInit {\n\n  twttr = window['twttr'] || {};\n\n  constructor() { }\n\n  ngOnInit() {\n    this.twttr && this.twttr.widgets.load();\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { HomeComponent } from './home/home.component';\nimport { Routes, RouterModule } from '@angular/router';\nimport { AboutComponent } from './pages/about/about.component';\nimport { BooksComponent } from './pages/books/books.component';\nimport { BlogsComponent } from './pages/blogs/blogs.component';\nimport { CreateBlogComponent } from './pages/create-blog/create-blog.component';\nimport { ApplicationsComponent } from './pages/applications/applications.component';\n\n// import { HomeComponent } from './pages/home/home.component';\n// import { OpinionComponent } from './pages/opinion/opinion.component';\n\nexport const pages = [  \n  {\n    path: 'showcase',\n    component: HomeComponent,\n    children: [\n      {\n        path: 'blog',\n        component: BlogsComponent,\n        label: \"Blog\"\n      },\n      {\n        path: 'create-blog',\n        component: CreateBlogComponent,\n        label: \"Create Blog\"\n      },\n      {\n        path: 'books',\n        component: BooksComponent,\n        label: \"Books\"\n      },\n      {\n        path: 'applications',\n        component: ApplicationsComponent,\n        label: \"Applications\"\n      },\n      {\n        path: 'about',\n        component: AboutComponent,\n        label: \"About Me!\"\n      }\n    ]\n  }];\n\nconst routes: Routes = [ \n  {\n    path: 'showcase',\n    redirectTo: '/showcase/blog',\n    pathMatch: 'full'\n  },\n  ...pages,\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ShowcaseRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HomeComponent } from './home/home.component';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatListModule } from '@angular/material/list';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { AboutComponent } from './pages/about/about.component';\nimport { BooksComponent } from './pages/books/books.component';\nimport { BlogsComponent } from './pages/blogs/blogs.component';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { ShowcaseRoutingModule } from './showcase-routing.module';\nimport { OpinionComponent } from './pages/opinion/opinion.component';\nimport { ScToolbarComponent } from '../components/sc-toolbar/sc-toolbar.component';\nimport { CreateBlogComponent } from './pages/create-blog/create-blog.component';\nimport { ApplicationsComponent } from './pages/applications/applications.component';\n\n@NgModule({\n  declarations: [    \n    HomeComponent,\n    BooksComponent,\n    AboutComponent,\n    BlogsComponent,\n    OpinionComponent,\n    ScToolbarComponent,\n    CreateBlogComponent,\n    ApplicationsComponent\n  ],\n  imports: [\n    CommonModule,\n    MatIconModule,\n    MatTabsModule,\n    MatCardModule,\n    MatListModule,\n    MatRadioModule,\n    MatInputModule,\n    MatButtonModule,\n    MatToolbarModule,\n    MatGridListModule,\n    ReactiveFormsModule,\n    ShowcaseRoutingModule\n  ]\n})\nexport class ShowcaseModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","\nimport { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}